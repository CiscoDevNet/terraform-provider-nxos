// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type BGPPeerTemplateMaxPrefix struct {
	Device        types.String `tfsdk:"device"`
	Dn            types.String `tfsdk:"id"`
	Asn           types.String `tfsdk:"asn"`
	TemplateName  types.String `tfsdk:"template_name"`
	AddressFamily types.String `tfsdk:"address_family"`
	Action        types.String `tfsdk:"action"`
	MaximumPrefix types.Int64  `tfsdk:"maximum_prefix"`
	RestartTime   types.Int64  `tfsdk:"restart_time"`
	Threshold     types.Int64  `tfsdk:"threshold"`
}

func (data BGPPeerTemplateMaxPrefix) getDn() string {
	return fmt.Sprintf("sys/bgp/inst/dom-[default]/peercont-[%s]/af-[%s]/maxpfxp", data.TemplateName.ValueString(), data.AddressFamily.ValueString())
}

func (data BGPPeerTemplateMaxPrefix) getClassName() string {
	return "bgpMaxPfxP"
}

func (data BGPPeerTemplateMaxPrefix) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.Action.IsUnknown() && !data.Action.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"action", data.Action.ValueString())
	}
	if (!data.MaximumPrefix.IsUnknown() && !data.MaximumPrefix.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"maxPfx", strconv.FormatInt(data.MaximumPrefix.ValueInt64(), 10))
	}
	if (!data.RestartTime.IsUnknown() && !data.RestartTime.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"restartTime", strconv.FormatInt(data.RestartTime.ValueInt64(), 10))
	}
	if (!data.Threshold.IsUnknown() && !data.Threshold.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"thresh", strconv.FormatInt(data.Threshold.ValueInt64(), 10))
	}

	return nxos.Body{body}
}

func (data *BGPPeerTemplateMaxPrefix) fromBody(res gjson.Result, all bool) {
	if !data.Action.IsNull() || all {
		data.Action = types.StringValue(res.Get(data.getClassName() + ".attributes.action").String())
	} else {
		data.Action = types.StringNull()
	}
	if !data.MaximumPrefix.IsNull() || all {
		data.MaximumPrefix = types.Int64Value(res.Get(data.getClassName() + ".attributes.maxPfx").Int())
	} else {
		data.MaximumPrefix = types.Int64Null()
	}
	if !data.RestartTime.IsNull() || all {
		data.RestartTime = types.Int64Value(res.Get(data.getClassName() + ".attributes.restartTime").Int())
	} else {
		data.RestartTime = types.Int64Null()
	}
	if !data.Threshold.IsNull() || all {
		data.Threshold = types.Int64Value(res.Get(data.getClassName() + ".attributes.thresh").Int())
	} else {
		data.Threshold = types.Int64Null()
	}
}

func (data BGPPeerTemplateMaxPrefix) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *BGPPeerTemplateMaxPrefix) getIdsFromDn() {
	reString := "sys/bgp/inst/dom-[default]/peercont-[%s]/af-[%s]/maxpfxp"
	reString = strings.ReplaceAll(reString, "%s", "(.+)")
	reString = strings.ReplaceAll(reString, "%v", "(.+)")
	reString = strings.ReplaceAll(reString, "[", "\\[")
	reString = strings.ReplaceAll(reString, "]", "\\]")
	re := regexp.MustCompile(reString)
	matches := re.FindStringSubmatch(data.Dn.ValueString())
	data.TemplateName = types.StringValue(matches[2])
	data.AddressFamily = types.StringValue(matches[3])
}
