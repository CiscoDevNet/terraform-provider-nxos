// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
)

type Subinterface struct {
	Dn         types.String `tfsdk:"id"`
	Id         types.String `tfsdk:"interface_id"`
	AdminSt    types.String `tfsdk:"admin_state"`
	Bw         types.Int64  `tfsdk:"bandwidth"`
	Delay      types.Int64  `tfsdk:"delay"`
	Descr      types.String `tfsdk:"description"`
	Encap      types.String `tfsdk:"encap"`
	LinkLog    types.String `tfsdk:"link_logging"`
	MediumType types.String `tfsdk:"medium"`
	Mtu        types.Int64  `tfsdk:"mtu"`
}

func (data Subinterface) getDn() string {
	return fmt.Sprintf("sys/intf/encrtd-[%s]", data.Id.Value)
}

func (data Subinterface) getClassName() string {
	return "l3EncRtdIf"
}

func (data Subinterface) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("id", data.Id.Value).
		Set("adminSt", data.AdminSt.Value).
		Set("bw", strconv.FormatInt(data.Bw.Value, 10)).
		Set("delay", strconv.FormatInt(data.Delay.Value, 10)).
		Set("descr", data.Descr.Value).
		Set("encap", data.Encap.Value).
		Set("linkLog", data.LinkLog.Value).
		Set("mediumType", data.MediumType.Value).
		Set("mtu", strconv.FormatInt(data.Mtu.Value, 10))
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *Subinterface) fromBody(res gjson.Result) {
	data.Dn.Value = res.Get("*.attributes.dn").String()
	data.Id.Value = res.Get("*.attributes.id").String()
	data.AdminSt.Value = res.Get("*.attributes.adminSt").String()
	data.Bw.Value = res.Get("*.attributes.bw").Int()
	data.Delay.Value = res.Get("*.attributes.delay").Int()
	data.Descr.Value = res.Get("*.attributes.descr").String()
	data.Encap.Value = res.Get("*.attributes.encap").String()
	data.LinkLog.Value = res.Get("*.attributes.linkLog").String()
	data.MediumType.Value = res.Get("*.attributes.mediumType").String()
	data.Mtu.Value = res.Get("*.attributes.mtu").Int()
}

func (data *Subinterface) fromPlan(plan Subinterface) {
}
