// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccNxosNVEInterface(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccNxosNVEInterfacePrerequisitesConfig + testAccNxosNVEInterfaceConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "admin_state", "enabled"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "advertise_virtual_mac", "true"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "hold_down_time", "60"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "host_reachability_protocol", "bgp"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "ingress_replication_protocol_bgp", "true"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "multicast_group_l2", "0.0.0.0"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "multicast_group_l3", "0.0.0.0"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "multisite_source_interface", "unspecified"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "source_interface", "lo0"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "suppress_arp", "true"),
					resource.TestCheckResourceAttr("nxos_nve_interface.test", "suppress_mac_route", "false"),
				),
			},
			{
				ResourceName:  "nxos_nve_interface.test",
				ImportState:   true,
				ImportStateId: "sys/eps/epId-[1]",
			},
		},
	})
}

const testAccNxosNVEInterfacePrerequisitesConfig = `
resource "nxos_rest" "PreReq0" {
  dn = "sys/fm/nvo"
  class_name = "fmNvo"
  delete = false
  content = {
      adminSt = "enabled"
  }
}

resource "nxos_rest" "PreReq1" {
  dn = "sys/fm/evpn"
  class_name = "fmEvpn"
  delete = false
  content = {
      adminSt = "enabled"
  }
  depends_on = [nxos_rest.PreReq0, ]
}

`

func testAccNxosNVEInterfaceConfig_minimum() string {
	return `
	resource "nxos_nve_interface" "test" {
  		depends_on = [nxos_rest.PreReq0, nxos_rest.PreReq1, ]
	}
	`
}

func testAccNxosNVEInterfaceConfig_all() string {
	return `
	resource "nxos_nve_interface" "test" {
		admin_state = "enabled"
		advertise_virtual_mac = true
		hold_down_time = 60
		host_reachability_protocol = "bgp"
		ingress_replication_protocol_bgp = true
		multicast_group_l2 = "0.0.0.0"
		multicast_group_l3 = "0.0.0.0"
		multisite_source_interface = "unspecified"
		source_interface = "lo0"
		suppress_arp = true
		suppress_mac_route = false
  		depends_on = [nxos_rest.PreReq0, nxos_rest.PreReq1, ]
	}
	`
}
