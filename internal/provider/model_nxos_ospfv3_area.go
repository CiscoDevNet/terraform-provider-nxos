// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-nxos/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type OSPFv3Area struct {
	Device               types.String `tfsdk:"device"`
	Dn                   types.String `tfsdk:"id"`
	InstanceName         types.String `tfsdk:"instance_name"`
	VrfName              types.String `tfsdk:"vrf_name"`
	AreaId               types.String `tfsdk:"area_id"`
	Redistribute         types.Bool   `tfsdk:"redistribute"`
	Summary              types.Bool   `tfsdk:"summary"`
	SupressFowardAddress types.Bool   `tfsdk:"supress_foward_address"`
	Type                 types.String `tfsdk:"type"`
}

func (data OSPFv3Area) getDn() string {
	return fmt.Sprintf("sys/ospfv3/inst-[%s]/dom-[%s]/area-[%s]", data.InstanceName.ValueString(), data.VrfName.ValueString(), data.AreaId.ValueString())
}

func (data OSPFv3Area) getClassName() string {
	return "ospfv3Area"
}

func (data OSPFv3Area) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.AreaId.IsUnknown() && !data.AreaId.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"id", data.AreaId.ValueString())
	}
	if (!data.Redistribute.IsUnknown() && !data.Redistribute.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"redistribute", strconv.FormatBool(data.Redistribute.ValueBool()))
	}
	if (!data.Summary.IsUnknown() && !data.Summary.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"summary", strconv.FormatBool(data.Summary.ValueBool()))
	}
	if (!data.SupressFowardAddress.IsUnknown() && !data.SupressFowardAddress.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"supressFa", strconv.FormatBool(data.SupressFowardAddress.ValueBool()))
	}
	if (!data.Type.IsUnknown() && !data.Type.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"type", data.Type.ValueString())
	}

	return nxos.Body{body}
}

func (data *OSPFv3Area) fromBody(res gjson.Result, all bool) {
	if !data.AreaId.IsNull() || all {
		data.AreaId = types.StringValue(res.Get(data.getClassName() + ".attributes.id").String())
	} else {
		data.AreaId = types.StringNull()
	}
	if !data.Redistribute.IsNull() || all {
		data.Redistribute = types.BoolValue(helpers.ParseNxosBoolean(res.Get(data.getClassName() + ".attributes.redistribute").String()))
	} else {
		data.Redistribute = types.BoolNull()
	}
	if !data.Summary.IsNull() || all {
		data.Summary = types.BoolValue(helpers.ParseNxosBoolean(res.Get(data.getClassName() + ".attributes.summary").String()))
	} else {
		data.Summary = types.BoolNull()
	}
	if !data.SupressFowardAddress.IsNull() || all {
		data.SupressFowardAddress = types.BoolValue(helpers.ParseNxosBoolean(res.Get(data.getClassName() + ".attributes.supressFa").String()))
	} else {
		data.SupressFowardAddress = types.BoolNull()
	}
	if !data.Type.IsNull() || all {
		data.Type = types.StringValue(res.Get(data.getClassName() + ".attributes.type").String())
	} else {
		data.Type = types.StringNull()
	}
}

func (data OSPFv3Area) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *OSPFv3Area) getIdsFromDn() {
	reString := strings.ReplaceAll("sys/ospfv3/inst-[%s]/dom-[%s]/area-[%s]", "%[1]s", ".+")
	reString = strings.ReplaceAll(reString, "%s", "(.+)")
	reString = strings.ReplaceAll(reString, "%v", "(.+)")
	reString = strings.ReplaceAll(reString, "[", "\\[")
	reString = strings.ReplaceAll(reString, "]", "\\]")
	re := regexp.MustCompile(reString)
	matches := re.FindStringSubmatch(data.Dn.ValueString())
	data.InstanceName = types.StringValue(matches[1])
	data.VrfName = types.StringValue(matches[2])
	data.AreaId = types.StringValue(matches[3])
}
