// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccNxosIPv4PrefixListRuleEntry(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccNxosIPv4PrefixListRuleEntryPrerequisitesConfig + testAccNxosIPv4PrefixListRuleEntryConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "rule_name", "RULE1"),
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "order", "10"),
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "action", "permit"),
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "criteria", "inexact"),
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "prefix", "192.168.1.0/24"),
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "from_range", "26"),
					resource.TestCheckResourceAttr("nxos_ipv4_prefix_list_rule_entry.test", "to_range", "32"),
				),
			},
			{
				ResourceName:  "nxos_ipv4_prefix_list_rule_entry.test",
				ImportState:   true,
				ImportStateId: "sys/rpm/pfxlistv4-[RULE1]/ent-[10]",
			},
		},
	})
}

const testAccNxosIPv4PrefixListRuleEntryPrerequisitesConfig = `
resource "nxos_rest" "PreReq0" {
  dn = "sys/rpm/pfxlistv4-[RULE1]"
  class_name = "rtpfxRuleV4"
  content = {
      name = "RULE1"
  }
}

`

func testAccNxosIPv4PrefixListRuleEntryConfig_minimum() string {
	return `
	resource "nxos_ipv4_prefix_list_rule_entry" "test" {
		rule_name = "RULE1"
		order = 10
  		depends_on = [nxos_rest.PreReq0, ]
	}
	`
}

func testAccNxosIPv4PrefixListRuleEntryConfig_all() string {
	return `
	resource "nxos_ipv4_prefix_list_rule_entry" "test" {
		rule_name = "RULE1"
		order = 10
		action = "permit"
		criteria = "inexact"
		prefix = "192.168.1.0/24"
		from_range = 26
		to_range = 32
  		depends_on = [nxos_rest.PreReq0, ]
	}
	`
}
