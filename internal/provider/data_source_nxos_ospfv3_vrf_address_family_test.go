// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceNxosOSPFv3VRFAddressFamily(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceNxosOSPFv3VRFAddressFamilyPrerequisitesConfig + testAccDataSourceNxosOSPFv3VRFAddressFamilyConfig,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.nxos_ospfv3_vrf_address_family.test", "address_family_type", "ipv6-ucast"),
					resource.TestCheckResourceAttr("data.nxos_ospfv3_vrf_address_family.test", "administrative_distance", "10"),
					resource.TestCheckResourceAttr("data.nxos_ospfv3_vrf_address_family.test", "default_metric", "1024"),
					resource.TestCheckResourceAttr("data.nxos_ospfv3_vrf_address_family.test", "max_ecmp_cost", "16"),
				),
			},
		},
	})
}

const testAccDataSourceNxosOSPFv3VRFAddressFamilyPrerequisitesConfig = `
resource "nxos_rest" "PreReq0" {
  dn = "sys/fm/ospfv3"
  class_name = "fmOspfv3"
  delete = false
  content = {
      adminSt = "enabled"
  }
}

resource "nxos_rest" "PreReq1" {
  dn = "sys/ospfv3"
  class_name = "ospfv3Entity"
  depends_on = [nxos_rest.PreReq0, ]
}

resource "nxos_rest" "PreReq2" {
  dn = "sys/ospfv3/inst-[OSPFv3]"
  class_name = "ospfv3Inst"
  content = {
      name = "OSPFv3"
  }
  depends_on = [nxos_rest.PreReq1, ]
}

resource "nxos_rest" "PreReq3" {
  dn = "sys/ospfv3/inst-[OSPFv3]/dom-[VRF1]"
  class_name = "ospfv3Dom"
  content = {
      name = "VRF1"
  }
  depends_on = [nxos_rest.PreReq2, ]
}

`

const testAccDataSourceNxosOSPFv3VRFAddressFamilyConfig = `

resource "nxos_ospfv3_vrf_address_family" "test" {
  instance_name = "OSPFv3"
  vrf_name = "VRF1"
  address_family_type = "ipv6-ucast"
  administrative_distance = "10"
  default_metric = "1024"
  max_ecmp_cost = 16
  depends_on = [nxos_rest.PreReq0, nxos_rest.PreReq1, nxos_rest.PreReq2, nxos_rest.PreReq3, ]
}

data "nxos_ospfv3_vrf_address_family" "test" {
  instance_name = "OSPFv3"
  vrf_name = "VRF1"
  address_family_type = "ipv6-ucast"
  depends_on = [nxos_ospfv3_vrf_address_family.test]
}
`
