// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
)

type SpanningTreeInterface struct {
	Device     types.String `tfsdk:"device"`
	Dn         types.String `tfsdk:"id"`
	Id         types.String `tfsdk:"interface_id"`
	AdminSt    types.String `tfsdk:"admin_state"`
	Bpdufilter types.String `tfsdk:"bpdu_filter"`
	Bpduguard  types.String `tfsdk:"bpdu_guard"`
	Cost       types.Int64  `tfsdk:"cost"`
	Ctrl       types.String `tfsdk:"ctrl"`
	Guard      types.String `tfsdk:"guard"`
	LinkType   types.String `tfsdk:"link_type"`
	Mode       types.String `tfsdk:"mode"`
	Priority   types.Int64  `tfsdk:"priority"`
}

func (data SpanningTreeInterface) getDn() string {
	return fmt.Sprintf("sys/stp/inst/if-[%s]", data.Id.Value)
}

func (data SpanningTreeInterface) getClassName() string {
	return "stpIf"
}

func (data SpanningTreeInterface) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("id", data.Id.Value).
		Set("adminSt", data.AdminSt.Value).
		Set("bpdufilter", data.Bpdufilter.Value).
		Set("bpduguard", data.Bpduguard.Value).
		Set("cost", strconv.FormatInt(data.Cost.Value, 10)).
		Set("ctrl", data.Ctrl.Value).
		Set("guard", data.Guard.Value).
		Set("linkType", data.LinkType.Value).
		Set("mode", data.Mode.Value).
		Set("priority", strconv.FormatInt(data.Priority.Value, 10))
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *SpanningTreeInterface) fromBody(res gjson.Result) {
	data.Id.Value = res.Get("*.attributes.id").String()
	data.AdminSt.Value = res.Get("*.attributes.adminSt").String()
	data.Bpdufilter.Value = res.Get("*.attributes.bpdufilter").String()
	data.Bpduguard.Value = res.Get("*.attributes.bpduguard").String()
	data.Cost.Value = res.Get("*.attributes.cost").Int()
	data.Ctrl.Value = res.Get("*.attributes.ctrl").String()
	data.Guard.Value = res.Get("*.attributes.guard").String()
	data.LinkType.Value = res.Get("*.attributes.linkType").String()
	data.Mode.Value = res.Get("*.attributes.mode").String()
	data.Priority.Value = res.Get("*.attributes.priority").Int()
}

func (data *SpanningTreeInterface) fromPlan(plan SpanningTreeInterface) {
	data.Device = plan.Device
	data.Dn.Value = plan.Dn.Value
}
