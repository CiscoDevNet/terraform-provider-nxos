// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
)

type RouteMapRuleEntryMatchRoutePrefixList struct {
	Device types.String `tfsdk:"device"`
	Dn     types.String `tfsdk:"id"`
	Rtmap  types.String `tfsdk:"rule_name"`
	Order  types.Int64  `tfsdk:"order"`
	TDn    types.String `tfsdk:"prefix_list_dn"`
}

func (data RouteMapRuleEntryMatchRoutePrefixList) getDn() string {
	return fmt.Sprintf("sys/rpm/rtmap-[%s]/ent-[%v]/mrtdst/rtrtDstAtt-[%s]", data.Rtmap.ValueString(), data.Order.ValueInt64(), data.TDn.ValueString())
}

func (data RouteMapRuleEntryMatchRoutePrefixList) getClassName() string {
	return "rtmapRsRtDstAtt"
}

func (data RouteMapRuleEntryMatchRoutePrefixList) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("tDn", data.TDn.ValueString())
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *RouteMapRuleEntryMatchRoutePrefixList) fromBody(res gjson.Result) {
	data.TDn = types.StringValue(res.Get("*.attributes.tDn").String())
}

func (data *RouteMapRuleEntryMatchRoutePrefixList) fromPlan(plan RouteMapRuleEntryMatchRoutePrefixList) {
	data.Device = plan.Device
	data.Dn = plan.Dn
	data.Rtmap = plan.Rtmap
	data.Order = plan.Order
}
