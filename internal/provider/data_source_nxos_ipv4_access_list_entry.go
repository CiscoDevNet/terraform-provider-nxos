// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nxos"
	"github.com/netascode/terraform-provider-nxos/internal/provider/helpers"
)

type dataSourceIPv4AccessListEntryType struct{}

func (t dataSourceIPv4AccessListEntryType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: helpers.NewResourceDescription("This data source can read IPv4 Access List Entries.", "ipv4aclACE", "Security%20and%20Policing/ipv4acl:ACE/").String,

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The distinguished name of the object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"name": {
				MarkdownDescription: "Access list name.",
				Type:                types.StringType,
				Required:            true,
			},
			"sequence_number": {
				MarkdownDescription: "Sequence number.",
				Type:                types.Int64Type,
				Required:            true,
			},
			"ack": {
				MarkdownDescription: "Match TCP ACK flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"action": {
				MarkdownDescription: "Action.",
				Type:                types.StringType,
				Computed:            true,
			},
			"dscp": {
				MarkdownDescription: "Match DSCP.",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"destination_address_group": {
				MarkdownDescription: "Destination address group.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_port_1": {
				MarkdownDescription: "First destination port number or name.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_port_2": {
				MarkdownDescription: "Second destination port number or name.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_port_group": {
				MarkdownDescription: "Destination port group.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_port_mask": {
				MarkdownDescription: "Destination port mask number or name.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_port_operator": {
				MarkdownDescription: "Destination port operator.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_prefix": {
				MarkdownDescription: "Destination prefix.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_prefix_length": {
				MarkdownDescription: "Destination prefix length.",
				Type:                types.StringType,
				Computed:            true,
			},
			"destination_prefix_mask": {
				MarkdownDescription: "Destination prefix mask.",
				Type:                types.StringType,
				Computed:            true,
			},
			"est": {
				MarkdownDescription: "Match TCP EST flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"fin": {
				MarkdownDescription: "Match TCP FIN flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"fragment": {
				MarkdownDescription: "Match non-initial fragment.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"http_option_type": {
				MarkdownDescription: "HTTP option method.",
				Type:                types.StringType,
				Computed:            true,
			},
			"icmp_code": {
				MarkdownDescription: "ICMP code.",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"icmp_type": {
				MarkdownDescription: "ICMP type.",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"logging": {
				MarkdownDescription: "Log matches against ACL entry.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"packet_length_1": {
				MarkdownDescription: "First packet length. Either `invalid` or a number between 19 and 9210.",
				Type:                types.StringType,
				Computed:            true,
			},
			"packet_length_2": {
				MarkdownDescription: "Second packet length. Either `invalid` or a number between 19 and 9210.",
				Type:                types.StringType,
				Computed:            true,
			},
			"packet_length_operator": {
				MarkdownDescription: "Packet length operator.",
				Type:                types.StringType,
				Computed:            true,
			},
			"precedence": {
				MarkdownDescription: "Precedence. Either `unspecified` or a number between 0 and 7.",
				Type:                types.StringType,
				Computed:            true,
			},
			"protocol": {
				MarkdownDescription: "Protocol name or number.",
				Type:                types.StringType,
				Computed:            true,
			},
			"protocol_mask": {
				MarkdownDescription: "Protocol mask name or number.",
				Type:                types.StringType,
				Computed:            true,
			},
			"psh": {
				MarkdownDescription: "Match TCP PSH flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"redirect": {
				MarkdownDescription: "Redirect action.",
				Type:                types.StringType,
				Computed:            true,
			},
			"remark": {
				MarkdownDescription: "ACL comment.",
				Type:                types.StringType,
				Computed:            true,
			},
			"rev": {
				MarkdownDescription: "Match TCP REV flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"rst": {
				MarkdownDescription: "Match TCP RST flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"source_address_group": {
				MarkdownDescription: "Source address group.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_port_1": {
				MarkdownDescription: "First source port name or number.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_port_2": {
				MarkdownDescription: "Second source port name or number.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_port_group": {
				MarkdownDescription: "Source port group.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_port_mask": {
				MarkdownDescription: "Source port mask name or number.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_port_operator": {
				MarkdownDescription: "Source port operator.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_prefix": {
				MarkdownDescription: "Source prefix.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_prefix_length": {
				MarkdownDescription: "Source prefix length.",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_prefix_mask": {
				MarkdownDescription: "Source prefix mask.",
				Type:                types.StringType,
				Computed:            true,
			},
			"syn": {
				MarkdownDescription: "Match TCP SYN flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"time_range": {
				MarkdownDescription: "Time range name.",
				Type:                types.StringType,
				Computed:            true,
			},
			"ttl": {
				MarkdownDescription: "TTL.",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"urg": {
				MarkdownDescription: "Match TCP URG flag.",
				Type:                types.BoolType,
				Computed:            true,
			},
			"vlan": {
				MarkdownDescription: "VLAN ID.",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"vni": {
				MarkdownDescription: "NVE VNI ID. Either `invalid` or a number between 0 and 16777216.",
				Type:                types.StringType,
				Computed:            true,
			},
		},
	}, nil
}

func (t dataSourceIPv4AccessListEntryType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceIPv4AccessListEntry{
		provider: provider,
	}, diags
}

type dataSourceIPv4AccessListEntry struct {
	provider provider
}

func (d dataSourceIPv4AccessListEntry) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config, state IPv4AccessListEntry

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getDn()))

	res, err := d.provider.client.GetDn(config.getDn(), nxos.OverrideUrl(d.provider.devices[config.Device.Value]))

	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	state.fromBody(res)
	state.fromPlan(config)

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getDn()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}
