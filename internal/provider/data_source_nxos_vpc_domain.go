// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-nxos/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nxos"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &VPCDomainDataSource{}
	_ datasource.DataSourceWithConfigure = &VPCDomainDataSource{}
)

func NewVPCDomainDataSource() datasource.DataSource {
	return &VPCDomainDataSource{}
}

type VPCDomainDataSource struct {
	clients map[string]*nxos.Client
}

func (d *VPCDomainDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vpc_domain"
}

func (d *VPCDomainDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: helpers.NewResourceDescription("This data source can read the vPC domain configuration.", "vpcDom", "System/vpc:Dom/").String,

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The distinguished name of the object.",
				Computed:            true,
			},
			"admin_state": schema.StringAttribute{
				MarkdownDescription: "vPC suspend locally.",
				Computed:            true,
			},
			"domain_id": schema.Int64Attribute{
				MarkdownDescription: "Domain id.",
				Computed:            true,
			},
			"auto_recovery": schema.StringAttribute{
				MarkdownDescription: "Auto Recovery.",
				Computed:            true,
			},
			"auto_recovery_interval": schema.Int64Attribute{
				MarkdownDescription: "Auto Recovery interval.",
				Computed:            true,
			},
			"delay_restore_orphan_port": schema.Int64Attribute{
				MarkdownDescription: "Delay restore for orphan ports.",
				Computed:            true,
			},
			"delay_restore_svi": schema.Int64Attribute{
				MarkdownDescription: "Delay restore for SVI.",
				Computed:            true,
			},
			"delay_restore_vpc": schema.Int64Attribute{
				MarkdownDescription: "Delay restore for vPC links.",
				Computed:            true,
			},
			"dscp": schema.Int64Attribute{
				MarkdownDescription: "DSCP.",
				Computed:            true,
			},
			"fast_convergence": schema.StringAttribute{
				MarkdownDescription: "Fast Convergence.",
				Computed:            true,
			},
			"graceful_consistency_check": schema.StringAttribute{
				MarkdownDescription: "Graceful Type-1 Consistency Check.",
				Computed:            true,
			},
			"l3_peer_router": schema.StringAttribute{
				MarkdownDescription: "L3 Peer Router.",
				Computed:            true,
			},
			"l3_peer_router_syslog": schema.StringAttribute{
				MarkdownDescription: "L3 Peer Router Syslog.",
				Computed:            true,
			},
			"l3_peer_router_syslog_interval": schema.Int64Attribute{
				MarkdownDescription: "L3 Peer Router Syslog Interval.",
				Computed:            true,
			},
			"peer_gateway": schema.StringAttribute{
				MarkdownDescription: "Peer Gateway.",
				Computed:            true,
			},
			"peer_ip": schema.StringAttribute{
				MarkdownDescription: "vPC peer IP address.",
				Computed:            true,
			},
			"peer_switch": schema.StringAttribute{
				MarkdownDescription: "vPC pair switches.",
				Computed:            true,
			},
			"role_priority": schema.Int64Attribute{
				MarkdownDescription: "Role priority.",
				Computed:            true,
			},
			"sys_mac": schema.StringAttribute{
				MarkdownDescription: "System MAC.",
				Computed:            true,
			},
			"system_priority": schema.Int64Attribute{
				MarkdownDescription: "System priority.",
				Computed:            true,
			},
			"track": schema.Int64Attribute{
				MarkdownDescription: "Tracking object to suspend vPC if object goes down.",
				Computed:            true,
			},
			"virtual_ip": schema.StringAttribute{
				MarkdownDescription: "vPC virtual IP address (vIP).",
				Computed:            true,
			},
		},
	}
}

func (d *VPCDomainDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.clients = req.ProviderData.(map[string]*nxos.Client)
}

func (d *VPCDomainDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config VPCDomain

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getDn()))

	queries := []func(*nxos.Req){}
	res, err := d.clients[config.Device.ValueString()].GetDn(config.getDn(), queries...)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	config.fromBody(res, true)
	config.Dn = types.StringValue(config.getDn())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getDn()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
