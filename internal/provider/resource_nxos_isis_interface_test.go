// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccNxosISISInterface(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccNxosISISInterfacePrerequisitesConfig + testAccNxosISISInterfaceConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "interface_id", "eth1/10"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_check", "false"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_check_l1", "false"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_check_l2", "false"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_key", ""),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_key_l1", ""),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_key_l2", ""),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_type", "unknown"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_type_l1", "unknown"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "authentication_type_l2", "unknown"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "circuit_type", "l2"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "vrf", "default"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_interval", "20"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_interval_l1", "20"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_interval_l2", "20"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_multiplier", "4"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_multiplier_l1", "4"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_multiplier_l2", "4"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "hello_padding", "never"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "metric_l1", "1000"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "metric_l2", "1000"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "mtu_check", "true"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "mtu_check_l1", "true"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "mtu_check_l2", "true"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "network_type_p2p", "on"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "passive", "l1"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "priority_l1", "80"),
					resource.TestCheckResourceAttr("nxos_isis_interface.test", "priority_l2", "80"),
				),
			},
			{
				ResourceName:  "nxos_isis_interface.test",
				ImportState:   true,
				ImportStateId: "sys/isis/if-[eth1/10]",
			},
		},
	})
}

const testAccNxosISISInterfacePrerequisitesConfig = `
resource "nxos_rest" "PreReq0" {
  dn = "sys/isis"
  class_name = "isisEntity"
  content = {
  }
}

`

func testAccNxosISISInterfaceConfig_minimum() string {
	return `
	resource "nxos_isis_interface" "test" {
		interface_id = "eth1/10"
  		depends_on = [nxos_rest.PreReq0, ]
	}
	`
}

func testAccNxosISISInterfaceConfig_all() string {
	return `
	resource "nxos_isis_interface" "test" {
		interface_id = "eth1/10"
		authentication_check = false
		authentication_check_l1 = false
		authentication_check_l2 = false
		authentication_key = ""
		authentication_key_l1 = ""
		authentication_key_l2 = ""
		authentication_type = "unknown"
		authentication_type_l1 = "unknown"
		authentication_type_l2 = "unknown"
		circuit_type = "l2"
		vrf = "default"
		hello_interval = 20
		hello_interval_l1 = 20
		hello_interval_l2 = 20
		hello_multiplier = 4
		hello_multiplier_l1 = 4
		hello_multiplier_l2 = 4
		hello_padding = "never"
		metric_l1 = 1000
		metric_l2 = 1000
		mtu_check = true
		mtu_check_l1 = true
		mtu_check_l2 = true
		network_type_p2p = "on"
		passive = "l1"
		priority_l1 = 80
		priority_l2 = 80
  		depends_on = [nxos_rest.PreReq0, ]
	}
	`
}
