// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
)

type NTPServer struct {
	Device  types.String `tfsdk:"device"`
	Dn      types.String `tfsdk:"id"`
	Name    types.String `tfsdk:"name"`
	Vrf     types.String `tfsdk:"vrf"`
	ProvT   types.String `tfsdk:"type"`
	KeyId   types.Int64  `tfsdk:"key_id"`
	MinPoll types.Int64  `tfsdk:"min_poll"`
	MaxPoll types.Int64  `tfsdk:"max_poll"`
}

func (data NTPServer) getDn() string {
	return fmt.Sprintf("sys/time/prov-[%s]", data.Name.ValueString())
}

func (data NTPServer) getClassName() string {
	return "datetimeNtpProvider"
}

func (data NTPServer) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("name", data.Name.ValueString()).
		Set("vrf", data.Vrf.ValueString()).
		Set("provT", data.ProvT.ValueString()).
		Set("keyId", strconv.FormatInt(data.KeyId.ValueInt64(), 10)).
		Set("minPoll", strconv.FormatInt(data.MinPoll.ValueInt64(), 10)).
		Set("maxPoll", strconv.FormatInt(data.MaxPoll.ValueInt64(), 10))
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *NTPServer) fromBody(res gjson.Result) {
	data.Name = types.StringValue(res.Get("*.attributes.name").String())
	data.Vrf = types.StringValue(res.Get("*.attributes.vrf").String())
	data.ProvT = types.StringValue(res.Get("*.attributes.provT").String())
	data.KeyId = types.Int64Value(res.Get("*.attributes.keyId").Int())
	data.MinPoll = types.Int64Value(res.Get("*.attributes.minPoll").Int())
	data.MaxPoll = types.Int64Value(res.Get("*.attributes.maxPoll").Int())
}

func (data *NTPServer) fromPlan(plan NTPServer) {
	data.Device = plan.Device
	data.Dn = plan.Dn
}
