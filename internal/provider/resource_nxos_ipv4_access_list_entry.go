// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nxos"
	"github.com/netascode/terraform-provider-nxos/internal/provider/helpers"
)

type resourceIPv4AccessListEntryType struct{}

func (t resourceIPv4AccessListEntryType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: helpers.NewResourceDescription("This resource can manage IPv4 Access List Entries.", "ipv4aclACE", "Security%20and%20Policing/ipv4acl:ACE/").AddParents("ipv4_access_list").String,

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The distinguished name of the object.",
				Type:                types.StringType,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.UseStateForUnknown(),
				},
			},
			"name": {
				MarkdownDescription: helpers.NewAttributeDescription("Access list name.").String,
				Type:                types.StringType,
				Required:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.RequiresReplace(),
				},
			},
			"sequence_number": {
				MarkdownDescription: helpers.NewAttributeDescription("Sequence number.").String,
				Type:                types.Int64Type,
				Required:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.RequiresReplace(),
				},
			},
			"ack": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP ACK flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"action": {
				MarkdownDescription: helpers.NewAttributeDescription("Action.").AddStringEnumDescription("invalid", "permit", "deny").AddDefaultValueDescription("invalid").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.StringEnumValidator("invalid", "permit", "deny"),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("invalid"),
				},
			},
			"dscp": {
				MarkdownDescription: helpers.NewAttributeDescription("Match DSCP.").AddIntegerRangeDescription(0, 63).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 63),
				},
			},
			"destination_address_group": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination address group.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_port_1": {
				MarkdownDescription: helpers.NewAttributeDescription("First destination port number or name.").AddStringEnumDescription("echo", "discard", "daytime", "chargen", "ftp-data", "ftp", "telnet", "smtp", "time", "nameserver", "whois", "tacacs", "domain", "bootps", "bootpc", "tftp", "gopher", "finger", "www", "hostname", "pop2", "pop3", "sunrpc", "ident", "nntp", "ntp", "netbios-ns", "netbios-dgm", "netbios-ss", "snmp", "snmptrap", "xdmcp", "bgp", "irc", "dnsix", "mobile-ip", "pim-auto-rp", "isakmp", "biff", "exec", "who", "login", "syslog", "cmd", "lpd", "talk", "rip", "uucp", "klogin", "kshell", "drip", "non500-isakmp").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_port_2": {
				MarkdownDescription: helpers.NewAttributeDescription("Second destination port number or name.").AddStringEnumDescription("echo", "discard", "daytime", "chargen", "ftp-data", "ftp", "telnet", "smtp", "time", "nameserver", "whois", "tacacs", "domain", "bootps", "bootpc", "tftp", "gopher", "finger", "www", "hostname", "pop2", "pop3", "sunrpc", "ident", "nntp", "ntp", "netbios-ns", "netbios-dgm", "netbios-ss", "snmp", "snmptrap", "xdmcp", "bgp", "irc", "dnsix", "mobile-ip", "pim-auto-rp", "isakmp", "biff", "exec", "who", "login", "syslog", "cmd", "lpd", "talk", "rip", "uucp", "klogin", "kshell", "drip", "non500-isakmp").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_port_group": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination port group.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_port_mask": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination port mask number or name.").AddStringEnumDescription("echo", "discard", "daytime", "chargen", "ftp-data", "ftp", "telnet", "smtp", "time", "nameserver", "whois", "tacacs", "domain", "bootps", "bootpc", "tftp", "gopher", "finger", "www", "hostname", "pop2", "pop3", "sunrpc", "ident", "nntp", "ntp", "netbios-ns", "netbios-dgm", "netbios-ss", "snmp", "snmptrap", "xdmcp", "bgp", "irc", "dnsix", "mobile-ip", "pim-auto-rp", "isakmp", "biff", "exec", "who", "login", "syslog", "cmd", "lpd", "talk", "rip", "uucp", "klogin", "kshell", "drip", "non500-isakmp").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_port_operator": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination port operator.").AddStringEnumDescription("none", "lt", "gt", "eq", "neq", "range").AddDefaultValueDescription("none").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.StringEnumValidator("none", "lt", "gt", "eq", "neq", "range"),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("none"),
				},
			},
			"destination_prefix": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination prefix.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_prefix_length": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination prefix length.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"destination_prefix_mask": {
				MarkdownDescription: helpers.NewAttributeDescription("Destination prefix mask.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"est": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP EST flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"fin": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP FIN flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"fragment": {
				MarkdownDescription: helpers.NewAttributeDescription("Match non-initial fragment.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"http_option_type": {
				MarkdownDescription: helpers.NewAttributeDescription("HTTP option method.").AddStringEnumDescription("invalid", "get", "put", "head", "post", "delete", "trace", "connect").AddDefaultValueDescription("invalid").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.StringEnumValidator("invalid", "get", "put", "head", "post", "delete", "trace", "connect"),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("invalid"),
				},
			},
			"icmp_code": {
				MarkdownDescription: helpers.NewAttributeDescription("ICMP code.").AddIntegerRangeDescription(0, 256).AddDefaultValueDescription("256").String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 256),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.IntegerDefaultModifier(256),
				},
			},
			"icmp_type": {
				MarkdownDescription: helpers.NewAttributeDescription("ICMP type.").AddIntegerRangeDescription(0, 256).AddDefaultValueDescription("256").String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 256),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.IntegerDefaultModifier(256),
				},
			},
			"logging": {
				MarkdownDescription: helpers.NewAttributeDescription("Log matches against ACL entry.").AddDefaultValueDescription("false").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.BooleanDefaultModifier(false),
				},
			},
			"packet_length_1": {
				MarkdownDescription: helpers.NewAttributeDescription("First packet length. Either `invalid` or a number between 19 and 9210.").AddDefaultValueDescription("invalid").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("invalid"),
				},
			},
			"packet_length_2": {
				MarkdownDescription: helpers.NewAttributeDescription("Second packet length. Either `invalid` or a number between 19 and 9210.").AddDefaultValueDescription("invalid").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("invalid"),
				},
			},
			"packet_length_operator": {
				MarkdownDescription: helpers.NewAttributeDescription("Packet length operator.").AddStringEnumDescription("none", "lt", "gt", "eq", "neq", "range").AddDefaultValueDescription("none").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.StringEnumValidator("none", "lt", "gt", "eq", "neq", "range"),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("none"),
				},
			},
			"precedence": {
				MarkdownDescription: helpers.NewAttributeDescription("Precedence. Either `unspecified` or a number between 0 and 7.").AddDefaultValueDescription("unspecified").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("unspecified"),
				},
			},
			"protocol": {
				MarkdownDescription: helpers.NewAttributeDescription("Protocol name or number.").AddStringEnumDescription("ip", "icmp", "igmp", "tcp", "udp", "gre", "esp", "ahp", "eigrp", "ospf", "nos", "pim", "pcp", "udf").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"protocol_mask": {
				MarkdownDescription: helpers.NewAttributeDescription("Protocol mask name or number.").AddStringEnumDescription("ip", "icmp", "igmp", "tcp", "udp", "gre", "esp", "ahp", "eigrp", "ospf", "nos", "pim", "pcp", "udf").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"psh": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP PSH flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"redirect": {
				MarkdownDescription: helpers.NewAttributeDescription("Redirect action.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"remark": {
				MarkdownDescription: helpers.NewAttributeDescription("ACL comment.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"rev": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP REV flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"rst": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP RST flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"source_address_group": {
				MarkdownDescription: helpers.NewAttributeDescription("Source address group.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_port_1": {
				MarkdownDescription: helpers.NewAttributeDescription("First source port name or number.").AddStringEnumDescription("echo", "discard", "daytime", "chargen", "ftp-data", "ftp", "telnet", "smtp", "time", "nameserver", "whois", "tacacs", "domain", "bootps", "bootpc", "tftp", "gopher", "finger", "www", "hostname", "pop2", "pop3", "sunrpc", "ident", "nntp", "ntp", "netbios-ns", "netbios-dgm", "netbios-ss", "snmp", "snmptrap", "xdmcp", "bgp", "irc", "dnsix", "mobile-ip", "pim-auto-rp", "isakmp", "biff", "exec", "who", "login", "syslog", "cmd", "lpd", "talk", "rip", "uucp", "klogin", "kshell", "drip", "non500-isakmp").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_port_2": {
				MarkdownDescription: helpers.NewAttributeDescription("Second source port name or number.").AddStringEnumDescription("echo", "discard", "daytime", "chargen", "ftp-data", "ftp", "telnet", "smtp", "time", "nameserver", "whois", "tacacs", "domain", "bootps", "bootpc", "tftp", "gopher", "finger", "www", "hostname", "pop2", "pop3", "sunrpc", "ident", "nntp", "ntp", "netbios-ns", "netbios-dgm", "netbios-ss", "snmp", "snmptrap", "xdmcp", "bgp", "irc", "dnsix", "mobile-ip", "pim-auto-rp", "isakmp", "biff", "exec", "who", "login", "syslog", "cmd", "lpd", "talk", "rip", "uucp", "klogin", "kshell", "drip", "non500-isakmp").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_port_group": {
				MarkdownDescription: helpers.NewAttributeDescription("Source port group.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_port_mask": {
				MarkdownDescription: helpers.NewAttributeDescription("Source port mask name or number.").AddStringEnumDescription("echo", "discard", "daytime", "chargen", "ftp-data", "ftp", "telnet", "smtp", "time", "nameserver", "whois", "tacacs", "domain", "bootps", "bootpc", "tftp", "gopher", "finger", "www", "hostname", "pop2", "pop3", "sunrpc", "ident", "nntp", "ntp", "netbios-ns", "netbios-dgm", "netbios-ss", "snmp", "snmptrap", "xdmcp", "bgp", "irc", "dnsix", "mobile-ip", "pim-auto-rp", "isakmp", "biff", "exec", "who", "login", "syslog", "cmd", "lpd", "talk", "rip", "uucp", "klogin", "kshell", "drip", "non500-isakmp").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_port_operator": {
				MarkdownDescription: helpers.NewAttributeDescription("Source port operator.").AddStringEnumDescription("none", "lt", "gt", "eq", "neq", "range").AddDefaultValueDescription("none").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.StringEnumValidator("none", "lt", "gt", "eq", "neq", "range"),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("none"),
				},
			},
			"source_prefix": {
				MarkdownDescription: helpers.NewAttributeDescription("Source prefix.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_prefix_length": {
				MarkdownDescription: helpers.NewAttributeDescription("Source prefix length.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_prefix_mask": {
				MarkdownDescription: helpers.NewAttributeDescription("Source prefix mask.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"syn": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP SYN flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"time_range": {
				MarkdownDescription: helpers.NewAttributeDescription("Time range name.").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"ttl": {
				MarkdownDescription: helpers.NewAttributeDescription("TTL.").AddIntegerRangeDescription(0, 255).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 255),
				},
			},
			"urg": {
				MarkdownDescription: helpers.NewAttributeDescription("Match TCP URG flag.").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"vlan": {
				MarkdownDescription: helpers.NewAttributeDescription("VLAN ID.").AddIntegerRangeDescription(0, 4095).AddDefaultValueDescription("4095").String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 4095),
				},
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.IntegerDefaultModifier(4095),
				},
			},
			"vni": {
				MarkdownDescription: helpers.NewAttributeDescription("NVE VNI ID. Either `invalid` or a number between 0 and 16777216.").AddDefaultValueDescription("invalid").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					helpers.StringDefaultModifier("invalid"),
				},
			},
		},
	}, nil
}

func (t resourceIPv4AccessListEntryType) NewResource(ctx context.Context, in tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return resourceIPv4AccessListEntry{
		provider: provider,
	}, diags
}

type resourceIPv4AccessListEntry struct {
	provider provider
}

func (r resourceIPv4AccessListEntry) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var plan, state IPv4AccessListEntry

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getDn()))

	// Post object
	body := plan.toBody()
	_, err := r.provider.client.Post(plan.getDn(), body.Str, nxos.OverrideUrl(r.provider.devices[plan.Device.Value]))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to post object, got error: %s", err))
		return
	}

	// Read object
	res, err := r.provider.client.GetDn(plan.getDn(), nxos.Query("rsp-prop-include", "config-only"), nxos.OverrideUrl(r.provider.devices[plan.Device.Value]))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	state.fromBody(res)
	state.fromPlan(plan)
	state.Dn.Value = plan.getDn()

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getDn()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceIPv4AccessListEntry) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state IPv4AccessListEntry

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Dn.Value))

	res, err := r.provider.client.GetDn(state.Dn.Value, nxos.Query("rsp-prop-include", "config-only"), nxos.OverrideUrl(r.provider.devices[state.Device.Value]))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	state.fromBody(res)

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Dn.Value))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceIPv4AccessListEntry) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	var plan, state IPv4AccessListEntry

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.getDn()))

	body := plan.toBody()
	_, err := r.provider.client.Post(plan.getDn(), body.Str, nxos.OverrideUrl(r.provider.devices[plan.Device.Value]))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to update object, got error: %s", err))
		return
	}

	// Read object
	res, err := r.provider.client.GetDn(plan.getDn(), nxos.Query("rsp-prop-include", "config-only"), nxos.OverrideUrl(r.provider.devices[plan.Device.Value]))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	state.fromBody(res)
	state.fromPlan(plan)

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.getDn()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceIPv4AccessListEntry) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var state IPv4AccessListEntry

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Dn.Value))

	res, err := r.provider.client.DeleteDn(state.Dn.Value, nxos.OverrideUrl(r.provider.devices[state.Device.Value]))
	if err != nil {
		errCode := res.Get("imdata.0.error.attributes.code").Str
		// Ignore errors of type "Cannot delete object"
		if errCode != "1" && errCode != "107" {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to update object, got error: %s", err))
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Dn.Value))

	resp.State.RemoveResource(ctx)
}

func (r resourceIPv4AccessListEntry) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	tfsdk.ResourceImportStatePassthroughID(ctx, tftypes.NewAttributePath().WithAttributeName("id"), req, resp)
}
