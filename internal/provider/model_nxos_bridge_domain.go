// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
)

type BridgeDomain struct {
	Device   types.String `tfsdk:"device"`
	Dn       types.String `tfsdk:"id"`
	FabEncap types.String `tfsdk:"fabric_encap"`
	AccEncap types.String `tfsdk:"access_encap"`
	Name     types.String `tfsdk:"name"`
}

func (data BridgeDomain) getDn() string {
	return fmt.Sprintf("sys/bd/bd-[%s]", data.FabEncap.ValueString())
}

func (data BridgeDomain) getClassName() string {
	return "l2BD"
}

func (data BridgeDomain) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("fabEncap", data.FabEncap.ValueString()).
		Set("accEncap", data.AccEncap.ValueString()).
		Set("name", data.Name.ValueString())
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *BridgeDomain) fromBody(res gjson.Result) {
	data.FabEncap = types.StringValue(res.Get("*.attributes.fabEncap").String())
	data.AccEncap = types.StringValue(res.Get("*.attributes.accEncap").String())
	data.Name = types.StringValue(res.Get("*.attributes.name").String())
}

func (data *BridgeDomain) fromPlan(plan BridgeDomain) {
	data.Device = plan.Device
	data.Dn = plan.Dn
}
