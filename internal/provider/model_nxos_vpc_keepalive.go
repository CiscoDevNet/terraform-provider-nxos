// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VPCKeepalive struct {
	Device                         types.String `tfsdk:"device"`
	Dn                             types.String `tfsdk:"id"`
	DestinationIp                  types.String `tfsdk:"destination_ip"`
	FlushTimeout                   types.Int64  `tfsdk:"flush_timeout"`
	Interval                       types.Int64  `tfsdk:"interval"`
	PrecedenceType                 types.Int64  `tfsdk:"precedence_type"`
	PrecedenceValue                types.Int64  `tfsdk:"precedence_value"`
	SourceIp                       types.String `tfsdk:"source_ip"`
	Timeout                        types.Int64  `tfsdk:"timeout"`
	TypeOfServiceByte              types.Int64  `tfsdk:"type_of_service_byte"`
	TypeOfServiceConfigurationType types.Int64  `tfsdk:"type_of_service_configuration_type"`
	TypeOfServiceType              types.Int64  `tfsdk:"type_of_service_type"`
	TypeOfServiceValue             types.Int64  `tfsdk:"type_of_service_value"`
	UdpPort                        types.Int64  `tfsdk:"udp_port"`
	Vrf                            types.String `tfsdk:"vrf"`
}

func (data VPCKeepalive) getDn() string {
	return "sys/vpc/inst/dom/keepalive"
}

func (data VPCKeepalive) getClassName() string {
	return "vpcKeepalive"
}

func (data VPCKeepalive) toBody() nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if (!data.DestinationIp.IsUnknown() && !data.DestinationIp.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"destIp", data.DestinationIp.ValueString())
	}
	if (!data.FlushTimeout.IsUnknown() && !data.FlushTimeout.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"flushTout", strconv.FormatInt(data.FlushTimeout.ValueInt64(), 10))
	}
	if (!data.Interval.IsUnknown() && !data.Interval.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"interval", strconv.FormatInt(data.Interval.ValueInt64(), 10))
	}
	if (!data.PrecedenceType.IsUnknown() && !data.PrecedenceType.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"precType", strconv.FormatInt(data.PrecedenceType.ValueInt64(), 10))
	}
	if (!data.PrecedenceValue.IsUnknown() && !data.PrecedenceValue.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"precValue", strconv.FormatInt(data.PrecedenceValue.ValueInt64(), 10))
	}
	if (!data.SourceIp.IsUnknown() && !data.SourceIp.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"srcIp", data.SourceIp.ValueString())
	}
	if (!data.Timeout.IsUnknown() && !data.Timeout.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"timeout", strconv.FormatInt(data.Timeout.ValueInt64(), 10))
	}
	if (!data.TypeOfServiceByte.IsUnknown() && !data.TypeOfServiceByte.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"tosByte", strconv.FormatInt(data.TypeOfServiceByte.ValueInt64(), 10))
	}
	if (!data.TypeOfServiceConfigurationType.IsUnknown() && !data.TypeOfServiceConfigurationType.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"tosCfgType", strconv.FormatInt(data.TypeOfServiceConfigurationType.ValueInt64(), 10))
	}
	if (!data.TypeOfServiceType.IsUnknown() && !data.TypeOfServiceType.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"tosType", strconv.FormatInt(data.TypeOfServiceType.ValueInt64(), 10))
	}
	if (!data.TypeOfServiceValue.IsUnknown() && !data.TypeOfServiceValue.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"tosValue", strconv.FormatInt(data.TypeOfServiceValue.ValueInt64(), 10))
	}
	if (!data.UdpPort.IsUnknown() && !data.UdpPort.IsNull()) || false {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"udpPort", strconv.FormatInt(data.UdpPort.ValueInt64(), 10))
	}
	if (!data.Vrf.IsUnknown() && !data.Vrf.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"vrf", data.Vrf.ValueString())
	}

	return nxos.Body{body}
}

func (data *VPCKeepalive) fromBody(res gjson.Result, all bool) {
	if !data.DestinationIp.IsNull() || all {
		data.DestinationIp = types.StringValue(res.Get(data.getClassName() + ".attributes.destIp").String())
	} else {
		data.DestinationIp = types.StringNull()
	}
	if !data.FlushTimeout.IsNull() || all {
		data.FlushTimeout = types.Int64Value(res.Get(data.getClassName() + ".attributes.flushTout").Int())
	} else {
		data.FlushTimeout = types.Int64Null()
	}
	if !data.Interval.IsNull() || all {
		data.Interval = types.Int64Value(res.Get(data.getClassName() + ".attributes.interval").Int())
	} else {
		data.Interval = types.Int64Null()
	}
	if !data.PrecedenceType.IsNull() || all {
		data.PrecedenceType = types.Int64Value(res.Get(data.getClassName() + ".attributes.precType").Int())
	} else {
		data.PrecedenceType = types.Int64Null()
	}
	if !data.PrecedenceValue.IsNull() || all {
		data.PrecedenceValue = types.Int64Value(res.Get(data.getClassName() + ".attributes.precValue").Int())
	} else {
		data.PrecedenceValue = types.Int64Null()
	}
	if !data.SourceIp.IsNull() || all {
		data.SourceIp = types.StringValue(res.Get(data.getClassName() + ".attributes.srcIp").String())
	} else {
		data.SourceIp = types.StringNull()
	}
	if !data.Timeout.IsNull() || all {
		data.Timeout = types.Int64Value(res.Get(data.getClassName() + ".attributes.timeout").Int())
	} else {
		data.Timeout = types.Int64Null()
	}
	if !data.TypeOfServiceByte.IsNull() || all {
		data.TypeOfServiceByte = types.Int64Value(res.Get(data.getClassName() + ".attributes.tosByte").Int())
	} else {
		data.TypeOfServiceByte = types.Int64Null()
	}
	if !data.TypeOfServiceConfigurationType.IsNull() || all {
		data.TypeOfServiceConfigurationType = types.Int64Value(res.Get(data.getClassName() + ".attributes.tosCfgType").Int())
	} else {
		data.TypeOfServiceConfigurationType = types.Int64Null()
	}
	if !data.TypeOfServiceType.IsNull() || all {
		data.TypeOfServiceType = types.Int64Value(res.Get(data.getClassName() + ".attributes.tosType").Int())
	} else {
		data.TypeOfServiceType = types.Int64Null()
	}
	if !data.TypeOfServiceValue.IsNull() || all {
		data.TypeOfServiceValue = types.Int64Value(res.Get(data.getClassName() + ".attributes.tosValue").Int())
	} else {
		data.TypeOfServiceValue = types.Int64Null()
	}
	if !data.UdpPort.IsNull() || all {
		data.UdpPort = types.Int64Value(res.Get(data.getClassName() + ".attributes.udpPort").Int())
	} else {
		data.UdpPort = types.Int64Null()
	}
	if !data.Vrf.IsNull() || all {
		data.Vrf = types.StringValue(res.Get(data.getClassName() + ".attributes.vrf").String())
	} else {
		data.Vrf = types.StringNull()
	}
}
