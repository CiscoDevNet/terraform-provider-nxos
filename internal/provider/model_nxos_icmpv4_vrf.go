// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type ICMPv4VRF struct {
	Device  types.String `tfsdk:"device"`
	Dn      types.String `tfsdk:"id"`
	VrfName types.String `tfsdk:"vrf_name"`
}

func (data ICMPv4VRF) getDn() string {
	return fmt.Sprintf("sys/icmpv4/inst/dom-[%s]", data.VrfName.ValueString())
}

func (data ICMPv4VRF) getClassName() string {
	return "icmpv4Dom"
}

func (data ICMPv4VRF) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.VrfName.IsUnknown() && !data.VrfName.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"name", data.VrfName.ValueString())
	}

	return nxos.Body{body}
}

func (data *ICMPv4VRF) fromBody(res gjson.Result, all bool) {
	if !data.VrfName.IsNull() || all {
		data.VrfName = types.StringValue(res.Get(data.getClassName() + ".attributes.name").String())
	} else {
		data.VrfName = types.StringNull()
	}
}

func (data ICMPv4VRF) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *ICMPv4VRF) getIdsFromDn() {
	reString := strings.ReplaceAll("sys/icmpv4/inst/dom-[%s]", "%[1]s", "")
	reString = strings.ReplaceAll(reString, "%s", "(.+)")
	reString = strings.ReplaceAll(reString, "%v", "(.+)")
	reString = strings.ReplaceAll(reString, "[", "\\[")
	reString = strings.ReplaceAll(reString, "]", "\\]")
	re := regexp.MustCompile(reString)
	matches := re.FindStringSubmatch(data.Dn.ValueString())
	data.VrfName = types.StringValue(matches[1])
}
