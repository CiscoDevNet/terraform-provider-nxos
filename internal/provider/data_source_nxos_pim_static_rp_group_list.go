// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nxos"
	"github.com/netascode/terraform-provider-nxos/internal/provider/helpers"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &PIMStaticRPGroupListDataSource{}
	_ datasource.DataSourceWithConfigure = &PIMStaticRPGroupListDataSource{}
)

func NewPIMStaticRPGroupListDataSource() datasource.DataSource {
	return &PIMStaticRPGroupListDataSource{}
}

type PIMStaticRPGroupListDataSource struct {
	data *NxosProviderData
}

func (d *PIMStaticRPGroupListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_pim_static_rp_group_list"
}

func (d *PIMStaticRPGroupListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: helpers.NewResourceDescription("This data source can read the PIM Static RP group list configuration.", "pimRPGrpList", "Layer%203/pim:RPGrpList/").String,

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The distinguished name of the object.",
				Computed:            true,
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: "VRF name.",
				Required:            true,
			},
			"rp_address": schema.StringAttribute{
				MarkdownDescription: "RP address.",
				Required:            true,
			},
			"address": schema.StringAttribute{
				MarkdownDescription: "Group list address information.",
				Required:            true,
			},
			"bidir": schema.BoolAttribute{
				MarkdownDescription: "Flag to treat Group Ranges as BiDir.",
				Computed:            true,
			},
			"override": schema.BoolAttribute{
				MarkdownDescription: "Flag to override RP preference to use Static over Dynamic RP.",
				Computed:            true,
			},
		},
	}
}

func (d *PIMStaticRPGroupListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.data = req.ProviderData.(*NxosProviderData)
}

func (d *PIMStaticRPGroupListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config, state PIMStaticRPGroupList

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getDn()))

	res, err := d.data.client.GetDn(config.getDn(), nxos.OverrideUrl(d.data.devices[config.Device.ValueString()]))

	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	state.fromBody(res)
	state.fromPlan(config)
	state.Dn = types.StringValue(config.getDn())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getDn()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}
