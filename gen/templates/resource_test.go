//go:build ignore
// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccNxos{{camelCase .Name}}(t *testing.T) {
	{{- if len .TestTags}}
	if {{range $i, $e := .TestTags}}{{if $i}} && {{end}}os.Getenv("{{$e}}") == ""{{end}} {
        t.Skip("skipping test, set environment variable {{range $i, $e := .TestTags}}{{if $i}} or {{end}}{{$e}}{{end}}")
    }
	{{- end}}
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: {{if .TestPrerequisites}}testAccNxos{{camelCase .Name}}PrerequisitesConfig+{{end}}testAccNxos{{camelCase .Name}}Config_all(),
				Check: resource.ComposeTestCheckFunc(
					{{- $name := .Name }}
					{{- range  .Attributes}}
					{{- if not .ExcludeTest}}
					resource.TestCheckResourceAttr("nxos_{{snakeCase $name}}.test", "{{.TfName}}", "{{.Example}}"),
					{{- end}}
					{{- end}}
					{{- range .ChildClasses}}
					{{- $list := .TfName}}
					{{- if eq .Type "single"}}
					{{- range .Attributes}}
					{{- if not .ExcludeTest}}
					resource.TestCheckResourceAttr("nxos_{{snakeCase $name}}.test", "{{.TfName}}", "{{.Example}}"),
					{{- end}}
					{{- end}}
					{{- else if eq .Type "list"}}
					{{- range .Attributes}}
					{{- if not .ExcludeTest}}
					resource.TestCheckResourceAttr("nxos_{{snakeCase $name}}.test", "{{$list}}.0.{{.TfName}}", "{{.Example}}"),
					{{- end}}
					{{- end}}
					{{- end}}
					{{- end}}
				),
			},
			{
				ResourceName:  "nxos_{{snakeCase $name}}.test",
				ImportState:   true,
				ImportStateId: "{{getExampleDn .Dn .Attributes}}",
			},
		},
	})
}

{{- if .TestPrerequisites}}
const testAccNxos{{camelCase .Name}}PrerequisitesConfig = `
{{- range $index, $item := .TestPrerequisites}}
resource "nxos_rest" "PreReq{{$index}}" {
  dn = "{{.Dn}}"
  class_name = "{{.ClassName}}"
  {{- if .NoDelete}}
  delete = false
  {{- end}}
  {{- if .Attributes}}
  content = {
    {{- range .Attributes}}
      {{.Name}} = {{if .Reference}}{{.Reference}}{{else}}"{{.Value}}"{{end}}
    {{- end}}
  }
  {{- end}}
  {{- if .Dependencies}}
  depends_on = [{{range .Dependencies}}nxos_rest.PreReq{{.}}, {{end}}]
  {{- end}}
}
{{ end}}
`
{{- end}}

func testAccNxos{{camelCase .Name}}Config_minimum() string {
	return `
	resource "nxos_{{snakeCase $name}}" "test" {
	{{- range  .Attributes}}
	{{- if or .Id .ReferenceOnly .Mandatory}}
		{{.TfName}} = {{if eq .Type "String"}}"{{end}}{{.Example}}{{if eq .Type "String"}}"{{end}}
	{{- end}}
	{{- end}}
	{{- if .TestPrerequisites}}
  		depends_on = [{{range $index, $item := .TestPrerequisites}}nxos_rest.PreReq{{$index}}, {{end}}]
	{{- end}}
	}
	`
}

func testAccNxos{{camelCase .Name}}Config_all() string {
	return `
	resource "nxos_{{snakeCase $name}}" "test" {
	{{- range  .Attributes}}
	{{- if not .ExcludeTest}}
		{{.TfName}} = {{if eq .Type "String"}}"{{end}}{{.Example}}{{if eq .Type "String"}}"{{end}}
	{{- end}}
	{{- end}}
	{{- range .ChildClasses}}
	{{- if eq .Type "single"}}
	{{- range .Attributes}}
	{{- if not .ExcludeTest}}
		{{.TfName}} = {{if eq .Type "String"}}"{{end}}{{.Example}}{{if eq .Type "String"}}"{{end}}
	{{- end}}
	{{- end}}
	{{- else if eq .Type "list"}}
		{{.TfName}} = [{
		{{- range .Attributes}}
		{{- if not .ExcludeTest}}
			{{.TfName}} = {{if eq .Type "String"}}"{{end}}{{.Example}}{{if eq .Type "String"}}"{{end}}
		{{- end}}
		{{- end}}
		}]
	{{- end}}
	{{- end}}
	{{- if .TestPrerequisites}}
  		depends_on = [{{range $index, $item := .TestPrerequisites}}nxos_rest.PreReq{{$index}}, {{end}}]
	{{- end}}
	}
	`
}
