// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type IPv6Interface struct {
	Device              types.String `tfsdk:"device"`
	Dn                  types.String `tfsdk:"id"`
	Vrf                 types.String `tfsdk:"vrf"`
	InterfaceId         types.String `tfsdk:"interface_id"`
	AutoConfiguration   types.String `tfsdk:"auto_configuration"`
	DefaultRoute        types.String `tfsdk:"default_route"`
	Ipv6Forward         types.String `tfsdk:"ipv6_forward"`
	Forward             types.String `tfsdk:"forward"`
	LinkAddressUseBia   types.String `tfsdk:"link_address_use_bia"`
	UseLinkLocalAddress types.String `tfsdk:"use_link_local_address"`
	Urpf                types.String `tfsdk:"urpf"`
	LinkLocalAddress    types.String `tfsdk:"link_local_address"`
}

func (data IPv6Interface) getDn() string {
	return fmt.Sprintf("sys/ipv6/inst/dom-[%s]/if-[%s]", data.Vrf.ValueString(), data.InterfaceId.ValueString())
}

func (data IPv6Interface) getClassName() string {
	return "ipv6If"
}

func (data IPv6Interface) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.InterfaceId.IsUnknown() && !data.InterfaceId.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"id", data.InterfaceId.ValueString())
	}
	if (!data.AutoConfiguration.IsUnknown() && !data.AutoConfiguration.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"autoconfig", data.AutoConfiguration.ValueString())
	}
	if (!data.DefaultRoute.IsUnknown() && !data.DefaultRoute.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"defaultRoute", data.DefaultRoute.ValueString())
	}
	if (!data.Ipv6Forward.IsUnknown() && !data.Ipv6Forward.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"forward", data.Ipv6Forward.ValueString())
	}
	if (!data.Forward.IsUnknown() && !data.Forward.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"forward", data.Forward.ValueString())
	}
	if (!data.LinkAddressUseBia.IsUnknown() && !data.LinkAddressUseBia.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"llAddrUseBia", data.LinkAddressUseBia.ValueString())
	}
	if (!data.UseLinkLocalAddress.IsUnknown() && !data.UseLinkLocalAddress.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"useLinkLocalAddr", data.UseLinkLocalAddress.ValueString())
	}
	if (!data.Urpf.IsUnknown() && !data.Urpf.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"urpf", data.Urpf.ValueString())
	}
	if (!data.LinkLocalAddress.IsUnknown() && !data.LinkLocalAddress.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"llAddr", data.LinkLocalAddress.ValueString())
	}

	return nxos.Body{body}
}

func (data *IPv6Interface) fromBody(res gjson.Result, all bool) {
	if !data.InterfaceId.IsNull() || all {
		data.InterfaceId = types.StringValue(res.Get(data.getClassName() + ".attributes.id").String())
	} else {
		data.InterfaceId = types.StringNull()
	}
	if !data.AutoConfiguration.IsNull() || all {
		data.AutoConfiguration = types.StringValue(res.Get(data.getClassName() + ".attributes.autoconfig").String())
	} else {
		data.AutoConfiguration = types.StringNull()
	}
	if !data.DefaultRoute.IsNull() || all {
		data.DefaultRoute = types.StringValue(res.Get(data.getClassName() + ".attributes.defaultRoute").String())
	} else {
		data.DefaultRoute = types.StringNull()
	}
	if !data.Ipv6Forward.IsNull() || all {
		data.Ipv6Forward = types.StringValue(res.Get(data.getClassName() + ".attributes.forward").String())
	} else {
		data.Ipv6Forward = types.StringNull()
	}
	if !data.Forward.IsNull() || all {
		data.Forward = types.StringValue(res.Get(data.getClassName() + ".attributes.forward").String())
	} else {
		data.Forward = types.StringNull()
	}
	if !data.LinkAddressUseBia.IsNull() || all {
		data.LinkAddressUseBia = types.StringValue(res.Get(data.getClassName() + ".attributes.llAddrUseBia").String())
	} else {
		data.LinkAddressUseBia = types.StringNull()
	}
	if !data.UseLinkLocalAddress.IsNull() || all {
		data.UseLinkLocalAddress = types.StringValue(res.Get(data.getClassName() + ".attributes.useLinkLocalAddr").String())
	} else {
		data.UseLinkLocalAddress = types.StringNull()
	}
	if !data.Urpf.IsNull() || all {
		data.Urpf = types.StringValue(res.Get(data.getClassName() + ".attributes.urpf").String())
	} else {
		data.Urpf = types.StringNull()
	}
	if !data.LinkLocalAddress.IsNull() || all {
		data.LinkLocalAddress = types.StringValue(res.Get(data.getClassName() + ".attributes.llAddr").String())
	} else {
		data.LinkLocalAddress = types.StringNull()
	}
}

func (data IPv6Interface) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *IPv6Interface) getIdsFromDn() {
	reString := strings.ReplaceAll("sys/ipv6/inst/dom-[%s]/if-[%s]", "%[1]s", ".+")
	reString = strings.ReplaceAll(reString, "%s", "(.+)")
	reString = strings.ReplaceAll(reString, "%v", "(.+)")
	reString = strings.ReplaceAll(reString, "[", "\\[")
	reString = strings.ReplaceAll(reString, "]", "\\]")
	re := regexp.MustCompile(reString)
	matches := re.FindStringSubmatch(data.Dn.ValueString())
	data.Vrf = types.StringValue(matches[1])
	data.InterfaceId = types.StringValue(matches[2])
}
