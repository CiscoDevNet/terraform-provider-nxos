// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VPCDomain struct {
	Device                     types.String `tfsdk:"device"`
	Dn                         types.String `tfsdk:"id"`
	AdminState                 types.String `tfsdk:"admin_state"`
	DomainId                   types.Int64  `tfsdk:"domain_id"`
	AutoRecovery               types.String `tfsdk:"auto_recovery"`
	AutoRecoveryInterval       types.Int64  `tfsdk:"auto_recovery_interval"`
	DelayRestoreOrphanPort     types.Int64  `tfsdk:"delay_restore_orphan_port"`
	DelayRestoreSvi            types.Int64  `tfsdk:"delay_restore_svi"`
	DelayRestoreVpc            types.Int64  `tfsdk:"delay_restore_vpc"`
	Dscp                       types.Int64  `tfsdk:"dscp"`
	FastConvergence            types.String `tfsdk:"fast_convergence"`
	GracefulConsistencyCheck   types.String `tfsdk:"graceful_consistency_check"`
	L3PeerRouter               types.String `tfsdk:"l3_peer_router"`
	L3PeerRouterSyslog         types.String `tfsdk:"l3_peer_router_syslog"`
	L3PeerRouterSyslogInterval types.Int64  `tfsdk:"l3_peer_router_syslog_interval"`
	PeerGateway                types.String `tfsdk:"peer_gateway"`
	PeerIp                     types.String `tfsdk:"peer_ip"`
	PeerSwitch                 types.String `tfsdk:"peer_switch"`
	RolePriority               types.Int64  `tfsdk:"role_priority"`
	SysMac                     types.String `tfsdk:"sys_mac"`
	SystemPriority             types.Int64  `tfsdk:"system_priority"`
	Track                      types.Int64  `tfsdk:"track"`
	VirtualIp                  types.String `tfsdk:"virtual_ip"`
}

func (data VPCDomain) getDn() string {
	return "sys/vpc/inst/dom"
}

func (data VPCDomain) getClassName() string {
	return "vpcDom"
}

func (data VPCDomain) toBody() nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if (!data.AdminState.IsUnknown() && !data.AdminState.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"adminSt", data.AdminState.ValueString())
	}
	if (!data.DomainId.IsUnknown() && !data.DomainId.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"id", strconv.FormatInt(data.DomainId.ValueInt64(), 10))
	}
	if (!data.AutoRecovery.IsUnknown() && !data.AutoRecovery.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"autoRecovery", data.AutoRecovery.ValueString())
	}
	if (!data.AutoRecoveryInterval.IsUnknown() && !data.AutoRecoveryInterval.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"autoRecoveryIntvl", strconv.FormatInt(data.AutoRecoveryInterval.ValueInt64(), 10))
	}
	if (!data.DelayRestoreOrphanPort.IsUnknown() && !data.DelayRestoreOrphanPort.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"delayRestoreOrphanPort", strconv.FormatInt(data.DelayRestoreOrphanPort.ValueInt64(), 10))
	}
	if (!data.DelayRestoreSvi.IsUnknown() && !data.DelayRestoreSvi.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"delayRestoreSVI", strconv.FormatInt(data.DelayRestoreSvi.ValueInt64(), 10))
	}
	if (!data.DelayRestoreVpc.IsUnknown() && !data.DelayRestoreVpc.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"delayRestoreVPC", strconv.FormatInt(data.DelayRestoreVpc.ValueInt64(), 10))
	}
	if (!data.Dscp.IsUnknown() && !data.Dscp.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"dscp", strconv.FormatInt(data.Dscp.ValueInt64(), 10))
	}
	if (!data.FastConvergence.IsUnknown() && !data.FastConvergence.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"fastConvergence", data.FastConvergence.ValueString())
	}
	if (!data.GracefulConsistencyCheck.IsUnknown() && !data.GracefulConsistencyCheck.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"grcflCnstncyChck", data.GracefulConsistencyCheck.ValueString())
	}
	if (!data.L3PeerRouter.IsUnknown() && !data.L3PeerRouter.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"l3PeerRouter", data.L3PeerRouter.ValueString())
	}
	if (!data.L3PeerRouterSyslog.IsUnknown() && !data.L3PeerRouterSyslog.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"l3PeerRouterSyslog", data.L3PeerRouterSyslog.ValueString())
	}
	if (!data.L3PeerRouterSyslogInterval.IsUnknown() && !data.L3PeerRouterSyslogInterval.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"l3PeerRouterSyslogInterval", strconv.FormatInt(data.L3PeerRouterSyslogInterval.ValueInt64(), 10))
	}
	if (!data.PeerGateway.IsUnknown() && !data.PeerGateway.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"peerGw", data.PeerGateway.ValueString())
	}
	if (!data.PeerIp.IsUnknown() && !data.PeerIp.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"peerIp", data.PeerIp.ValueString())
	}
	if (!data.PeerSwitch.IsUnknown() && !data.PeerSwitch.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"peerSwitch", data.PeerSwitch.ValueString())
	}
	if (!data.RolePriority.IsUnknown() && !data.RolePriority.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"rolePrio", strconv.FormatInt(data.RolePriority.ValueInt64(), 10))
	}
	if (!data.SysMac.IsUnknown() && !data.SysMac.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"sysMac", data.SysMac.ValueString())
	}
	if (!data.SystemPriority.IsUnknown() && !data.SystemPriority.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"sysPrio", strconv.FormatInt(data.SystemPriority.ValueInt64(), 10))
	}
	if (!data.Track.IsUnknown() && !data.Track.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"track", strconv.FormatInt(data.Track.ValueInt64(), 10))
	}
	if (!data.VirtualIp.IsUnknown() && !data.VirtualIp.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"virtualIp", data.VirtualIp.ValueString())
	}

	return nxos.Body{body}
}

func (data *VPCDomain) fromBody(res gjson.Result, all bool) {
	if !data.AdminState.IsNull() || all {
		data.AdminState = types.StringValue(res.Get(data.getClassName() + ".attributes.adminSt").String())
	} else {
		data.AdminState = types.StringNull()
	}
	if !data.DomainId.IsNull() || all {
		data.DomainId = types.Int64Value(res.Get(data.getClassName() + ".attributes.id").Int())
	} else {
		data.DomainId = types.Int64Null()
	}
	if !data.AutoRecovery.IsNull() || all {
		data.AutoRecovery = types.StringValue(res.Get(data.getClassName() + ".attributes.autoRecovery").String())
	} else {
		data.AutoRecovery = types.StringNull()
	}
	if !data.AutoRecoveryInterval.IsNull() || all {
		data.AutoRecoveryInterval = types.Int64Value(res.Get(data.getClassName() + ".attributes.autoRecoveryIntvl").Int())
	} else {
		data.AutoRecoveryInterval = types.Int64Null()
	}
	if !data.DelayRestoreOrphanPort.IsNull() || all {
		data.DelayRestoreOrphanPort = types.Int64Value(res.Get(data.getClassName() + ".attributes.delayRestoreOrphanPort").Int())
	} else {
		data.DelayRestoreOrphanPort = types.Int64Null()
	}
	if !data.DelayRestoreSvi.IsNull() || all {
		data.DelayRestoreSvi = types.Int64Value(res.Get(data.getClassName() + ".attributes.delayRestoreSVI").Int())
	} else {
		data.DelayRestoreSvi = types.Int64Null()
	}
	if !data.DelayRestoreVpc.IsNull() || all {
		data.DelayRestoreVpc = types.Int64Value(res.Get(data.getClassName() + ".attributes.delayRestoreVPC").Int())
	} else {
		data.DelayRestoreVpc = types.Int64Null()
	}
	if !data.Dscp.IsNull() || all {
		data.Dscp = types.Int64Value(res.Get(data.getClassName() + ".attributes.dscp").Int())
	} else {
		data.Dscp = types.Int64Null()
	}
	if !data.FastConvergence.IsNull() || all {
		data.FastConvergence = types.StringValue(res.Get(data.getClassName() + ".attributes.fastConvergence").String())
	} else {
		data.FastConvergence = types.StringNull()
	}
	if !data.GracefulConsistencyCheck.IsNull() || all {
		data.GracefulConsistencyCheck = types.StringValue(res.Get(data.getClassName() + ".attributes.grcflCnstncyChck").String())
	} else {
		data.GracefulConsistencyCheck = types.StringNull()
	}
	if !data.L3PeerRouter.IsNull() || all {
		data.L3PeerRouter = types.StringValue(res.Get(data.getClassName() + ".attributes.l3PeerRouter").String())
	} else {
		data.L3PeerRouter = types.StringNull()
	}
	if !data.L3PeerRouterSyslog.IsNull() || all {
		data.L3PeerRouterSyslog = types.StringValue(res.Get(data.getClassName() + ".attributes.l3PeerRouterSyslog").String())
	} else {
		data.L3PeerRouterSyslog = types.StringNull()
	}
	if !data.L3PeerRouterSyslogInterval.IsNull() || all {
		data.L3PeerRouterSyslogInterval = types.Int64Value(res.Get(data.getClassName() + ".attributes.l3PeerRouterSyslogInterval").Int())
	} else {
		data.L3PeerRouterSyslogInterval = types.Int64Null()
	}
	if !data.PeerGateway.IsNull() || all {
		data.PeerGateway = types.StringValue(res.Get(data.getClassName() + ".attributes.peerGw").String())
	} else {
		data.PeerGateway = types.StringNull()
	}
	if !data.PeerIp.IsNull() || all {
		data.PeerIp = types.StringValue(res.Get(data.getClassName() + ".attributes.peerIp").String())
	} else {
		data.PeerIp = types.StringNull()
	}
	if !data.PeerSwitch.IsNull() || all {
		data.PeerSwitch = types.StringValue(res.Get(data.getClassName() + ".attributes.peerSwitch").String())
	} else {
		data.PeerSwitch = types.StringNull()
	}
	if !data.RolePriority.IsNull() || all {
		data.RolePriority = types.Int64Value(res.Get(data.getClassName() + ".attributes.rolePrio").Int())
	} else {
		data.RolePriority = types.Int64Null()
	}
	if !data.SysMac.IsNull() || all {
		data.SysMac = types.StringValue(res.Get(data.getClassName() + ".attributes.sysMac").String())
	} else {
		data.SysMac = types.StringNull()
	}
	if !data.SystemPriority.IsNull() || all {
		data.SystemPriority = types.Int64Value(res.Get(data.getClassName() + ".attributes.sysPrio").Int())
	} else {
		data.SystemPriority = types.Int64Null()
	}
	if !data.Track.IsNull() || all {
		data.Track = types.Int64Value(res.Get(data.getClassName() + ".attributes.track").Int())
	} else {
		data.Track = types.Int64Null()
	}
	if !data.VirtualIp.IsNull() || all {
		data.VirtualIp = types.StringValue(res.Get(data.getClassName() + ".attributes.virtualIp").String())
	} else {
		data.VirtualIp = types.StringNull()
	}
}

func (data VPCDomain) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}
