// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-nxos/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Keychain_key struct {
	Device    types.String `tfsdk:"device"`
	Dn        types.String `tfsdk:"id"`
	Keychain  types.String `tfsdk:"keychain"`
	KeyId     types.Int64  `tfsdk:"key_id"`
	KeyString types.String `tfsdk:"key_string"`
}

func (data Keychain_key) getDn() string {
	return fmt.Sprintf("sys/kcmgr/keychains/classickeychain-[%s]/classickeyid-[%v]", data.Keychain.ValueString(), data.KeyId.ValueInt64())
}

func (data Keychain_key) getClassName() string {
	return "kcmgrKey"
}

func (data Keychain_key) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.KeyId.IsUnknown() && !data.KeyId.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"keyId", strconv.FormatInt(data.KeyId.ValueInt64(), 10))
	}
	if (!data.KeyString.IsUnknown() && !data.KeyString.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"keyString", data.KeyString.ValueString())
	}

	return nxos.Body{body}
}

func (data *Keychain_key) fromBody(res gjson.Result, all bool) {
	if !data.KeyId.IsNull() || all {
		data.KeyId = types.Int64Value(res.Get(data.getClassName() + ".attributes.keyId").Int())
	} else {
		data.KeyId = types.Int64Null()
	}
}

func (data Keychain_key) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *Keychain_key) getIdsFromDn() {
	reString := strings.ReplaceAll("sys/kcmgr/keychains/classickeychain-[%s]/classickeyid-[%v]", "%[1]s", ".+")
	reString = strings.ReplaceAll(reString, "%s", "(.+)")
	reString = strings.ReplaceAll(reString, "%v", "(.+)")
	reString = strings.ReplaceAll(reString, "[", "\\[")
	reString = strings.ReplaceAll(reString, "]", "\\]")
	re := regexp.MustCompile(reString)
	matches := re.FindStringSubmatch(data.Dn.ValueString())
	data.Keychain = types.StringValue(matches[1])
	data.KeyId = types.Int64Value(helpers.Must(strconv.ParseInt(matches[2], 10, 0)))
}
