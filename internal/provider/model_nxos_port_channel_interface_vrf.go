// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type PortChannelInterfaceVRF struct {
	Device      types.String `tfsdk:"device"`
	Dn          types.String `tfsdk:"id"`
	InterfaceId types.String `tfsdk:"interface_id"`
	VrfDn       types.String `tfsdk:"vrf_dn"`
}

func (data PortChannelInterfaceVRF) getDn() string {
	return fmt.Sprintf("sys/intf/aggr-[%s]/rtvrfMbr", data.InterfaceId.ValueString())
}

func (data PortChannelInterfaceVRF) getClassName() string {
	return "nwRtVrfMbr"
}

func (data PortChannelInterfaceVRF) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.VrfDn.IsUnknown() && !data.VrfDn.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"tDn", data.VrfDn.ValueString())
	}

	return nxos.Body{body}
}

func (data *PortChannelInterfaceVRF) fromBody(res gjson.Result, all bool) {
	if !data.VrfDn.IsNull() || all {
		data.VrfDn = types.StringValue(res.Get(data.getClassName() + ".attributes.tDn").String())
	} else {
		data.VrfDn = types.StringNull()
	}
}

func (data PortChannelInterfaceVRF) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *PortChannelInterfaceVRF) getIdsFromDn() {
	var InterfaceId string
	fmt.Sscanf(data.Dn.ValueString(), "sys/intf/aggr-[%s]/rtvrfMbr", &InterfaceId)
	data.InterfaceId = types.StringValue(InterfaceId)
}
