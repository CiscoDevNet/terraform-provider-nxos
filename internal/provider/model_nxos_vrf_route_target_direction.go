// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VRFRouteTargetDirection struct {
	Device                   types.String `tfsdk:"device"`
	Dn                       types.String `tfsdk:"id"`
	Vrf                      types.String `tfsdk:"vrf"`
	AddressFamily            types.String `tfsdk:"address_family"`
	RouteTargetAddressFamily types.String `tfsdk:"route_target_address_family"`
	Direction                types.String `tfsdk:"direction"`
}

func (data VRFRouteTargetDirection) getDn() string {
	return fmt.Sprintf("sys/inst-[%s]/dom-[%[1]s]/af-[%s]/ctrl-[%s]/rttp-[%s]", data.Vrf.ValueString(), data.AddressFamily.ValueString(), data.RouteTargetAddressFamily.ValueString(), data.Direction.ValueString())
}

func (data VRFRouteTargetDirection) getClassName() string {
	return "rtctrlRttP"
}

func (data VRFRouteTargetDirection) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.Direction.IsUnknown() && !data.Direction.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"type", data.Direction.ValueString())
	}

	return nxos.Body{body}
}

func (data *VRFRouteTargetDirection) fromBody(res gjson.Result, all bool) {
	if !data.Direction.IsNull() || all {
		data.Direction = types.StringValue(res.Get(data.getClassName() + ".attributes.type").String())
	} else {
		data.Direction = types.StringNull()
	}
}

func (data VRFRouteTargetDirection) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}

func (data *VRFRouteTargetDirection) getIdsFromDn() {
	var Vrf string
	var AddressFamily string
	var RouteTargetAddressFamily string
	var Direction string
	fmt.Sscanf(data.Dn.ValueString(), "sys/inst-[%s]/dom-[%[1]s]/af-[%s]/ctrl-[%s]/rttp-[%s]", &Vrf, &AddressFamily, &RouteTargetAddressFamily, &Direction)
	data.Vrf = types.StringValue(Vrf)
	data.AddressFamily = types.StringValue(AddressFamily)
	data.RouteTargetAddressFamily = types.StringValue(RouteTargetAddressFamily)
	data.Direction = types.StringValue(Direction)
}
