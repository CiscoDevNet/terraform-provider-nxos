// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SpanningTreeInterface struct {
	Device      types.String `tfsdk:"device"`
	Dn          types.String `tfsdk:"id"`
	InterfaceId types.String `tfsdk:"interface_id"`
	AdminState  types.String `tfsdk:"admin_state"`
	BpduFilter  types.String `tfsdk:"bpdu_filter"`
	BpduGuard   types.String `tfsdk:"bpdu_guard"`
	Cost        types.Int64  `tfsdk:"cost"`
	Guard       types.String `tfsdk:"guard"`
	LinkType    types.String `tfsdk:"link_type"`
	Mode        types.String `tfsdk:"mode"`
	Priority    types.Int64  `tfsdk:"priority"`
}

func (data SpanningTreeInterface) getDn() string {
	return fmt.Sprintf("sys/stp/inst/if-[%s]", data.InterfaceId.ValueString())
}

func (data SpanningTreeInterface) getClassName() string {
	return "stpIf"
}

func (data SpanningTreeInterface) toBody(statusReplace bool) nxos.Body {
	body := ""
	body, _ = sjson.Set(body, data.getClassName()+".attributes", map[string]interface{}{})
	if statusReplace {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"status", "replaced")
	}
	if (!data.InterfaceId.IsUnknown() && !data.InterfaceId.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"id", data.InterfaceId.ValueString())
	}
	if (!data.AdminState.IsUnknown() && !data.AdminState.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"adminSt", data.AdminState.ValueString())
	}
	if (!data.BpduFilter.IsUnknown() && !data.BpduFilter.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"bpdufilter", data.BpduFilter.ValueString())
	}
	if (!data.BpduGuard.IsUnknown() && !data.BpduGuard.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"bpduguard", data.BpduGuard.ValueString())
	}
	if (!data.Cost.IsUnknown() && !data.Cost.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"cost", strconv.FormatInt(data.Cost.ValueInt64(), 10))
	}
	if (!data.Guard.IsUnknown() && !data.Guard.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"guard", data.Guard.ValueString())
	}
	if (!data.LinkType.IsUnknown() && !data.LinkType.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"linkType", data.LinkType.ValueString())
	}
	if (!data.Mode.IsUnknown() && !data.Mode.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"mode", data.Mode.ValueString())
	}
	if (!data.Priority.IsUnknown() && !data.Priority.IsNull()) || true {
		body, _ = sjson.Set(body, data.getClassName()+".attributes."+"priority", strconv.FormatInt(data.Priority.ValueInt64(), 10))
	}

	return nxos.Body{body}
}

func (data *SpanningTreeInterface) fromBody(res gjson.Result, all bool) {
	if !data.InterfaceId.IsNull() || all {
		data.InterfaceId = types.StringValue(res.Get(data.getClassName() + ".attributes.id").String())
	} else {
		data.InterfaceId = types.StringNull()
	}
	if !data.AdminState.IsNull() || all {
		data.AdminState = types.StringValue(res.Get(data.getClassName() + ".attributes.adminSt").String())
	} else {
		data.AdminState = types.StringNull()
	}
	if !data.BpduFilter.IsNull() || all {
		data.BpduFilter = types.StringValue(res.Get(data.getClassName() + ".attributes.bpdufilter").String())
	} else {
		data.BpduFilter = types.StringNull()
	}
	if !data.BpduGuard.IsNull() || all {
		data.BpduGuard = types.StringValue(res.Get(data.getClassName() + ".attributes.bpduguard").String())
	} else {
		data.BpduGuard = types.StringNull()
	}
	if !data.Cost.IsNull() || all {
		data.Cost = types.Int64Value(res.Get(data.getClassName() + ".attributes.cost").Int())
	} else {
		data.Cost = types.Int64Null()
	}
	if !data.Guard.IsNull() || all {
		data.Guard = types.StringValue(res.Get(data.getClassName() + ".attributes.guard").String())
	} else {
		data.Guard = types.StringNull()
	}
	if !data.LinkType.IsNull() || all {
		data.LinkType = types.StringValue(res.Get(data.getClassName() + ".attributes.linkType").String())
	} else {
		data.LinkType = types.StringNull()
	}
	if !data.Mode.IsNull() || all {
		data.Mode = types.StringValue(res.Get(data.getClassName() + ".attributes.mode").String())
	} else {
		data.Mode = types.StringNull()
	}
	if !data.Priority.IsNull() || all {
		data.Priority = types.Int64Value(res.Get(data.getClassName() + ".attributes.priority").Int())
	} else {
		data.Priority = types.Int64Null()
	}
}

func (data SpanningTreeInterface) toDeleteBody() nxos.Body {
	body := ""

	return nxos.Body{body}
}
