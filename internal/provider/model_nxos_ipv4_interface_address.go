// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/tidwall/gjson"
)

type IPv4InterfaceAddress struct {
	Device types.String `tfsdk:"device"`
	Dn     types.String `tfsdk:"id"`
	Dom    types.String `tfsdk:"vrf"`
	Id     types.String `tfsdk:"interface_id"`
	Addr   types.String `tfsdk:"address"`
	Type   types.String `tfsdk:"type"`
}

func (data IPv4InterfaceAddress) getDn() string {
	return fmt.Sprintf("sys/ipv4/inst/dom-[%s]/if-[%s]/addr-[%s]", data.Dom.ValueString(), data.Id.ValueString(), data.Addr.ValueString())
}

func (data IPv4InterfaceAddress) getClassName() string {
	return "ipv4Addr"
}

func (data IPv4InterfaceAddress) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("addr", data.Addr.ValueString()).
		Set("type", data.Type.ValueString())
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *IPv4InterfaceAddress) fromBody(res gjson.Result) {
	data.Addr = types.StringValue(res.Get("*.attributes.addr").String())
	data.Type = types.StringValue(res.Get("*.attributes.type").String())
}

func (data *IPv4InterfaceAddress) fromPlan(plan IPv4InterfaceAddress) {
	data.Device = plan.Device
	data.Dn = plan.Dn
	data.Dom = plan.Dom
	data.Id = plan.Id
}
