// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/netascode/terraform-provider-nxos/internal/provider/helpers"
	"github.com/tidwall/gjson"
)

type IPv4AccessListEntry struct {
	Device          types.String `tfsdk:"device"`
	Dn              types.String `tfsdk:"id"`
	Name            types.String `tfsdk:"name"`
	SeqNum          types.Int64  `tfsdk:"sequence_number"`
	Ack             types.Bool   `tfsdk:"ack"`
	Action          types.String `tfsdk:"action"`
	Dscp            types.Int64  `tfsdk:"dscp"`
	DstAddrGroup    types.String `tfsdk:"destination_address_group"`
	DstPort1        types.Int64  `tfsdk:"destination_port_1"`
	DstPort2        types.Int64  `tfsdk:"destination_port_2"`
	DstPortGroup    types.String `tfsdk:"destination_port_group"`
	DstPortMask     types.Int64  `tfsdk:"destination_port_mask"`
	DstPortOp       types.String `tfsdk:"destination_port_operator"`
	DstPrefix       types.String `tfsdk:"destination_prefix"`
	DstPrefixLength types.String `tfsdk:"destination_prefix_length"`
	DstPrefixMask   types.String `tfsdk:"destination_prefix_mask"`
	Est             types.Bool   `tfsdk:"est"`
	Fin             types.Bool   `tfsdk:"fin"`
	Fragment        types.Bool   `tfsdk:"fragment"`
	HttpOption      types.String `tfsdk:"http_option_type"`
	IcmpCode        types.Int64  `tfsdk:"icmp_code"`
	IcmpType        types.Int64  `tfsdk:"icmp_type"`
	Logging         types.Bool   `tfsdk:"logging"`
	PktLen1         types.String `tfsdk:"packet_length_1"`
	PktLen2         types.String `tfsdk:"packet_length_2"`
	PktLenOp        types.String `tfsdk:"packet_length_operator"`
	Precedence      types.Int64  `tfsdk:"precedence"`
	Protocol        types.String `tfsdk:"protocol"`
	ProtocolMask    types.String `tfsdk:"protocol_mask"`
	Psh             types.Bool   `tfsdk:"psh"`
	Redirect        types.String `tfsdk:"redirect"`
	Remark          types.String `tfsdk:"remark"`
	Rev             types.Bool   `tfsdk:"rev"`
	Rst             types.Bool   `tfsdk:"rst"`
	SrcAddrGroup    types.String `tfsdk:"source_address_group"`
	SrcPort1        types.Int64  `tfsdk:"source_port_1"`
	SrcPort2        types.Int64  `tfsdk:"source_port_2"`
	SrcPortGroup    types.String `tfsdk:"source_port_group"`
	SrcPortMask     types.Int64  `tfsdk:"source_port_mask"`
	SrcPortOp       types.String `tfsdk:"source_port_operator"`
	SrcPrefix       types.String `tfsdk:"source_prefix"`
	SrcPrefixLength types.String `tfsdk:"source_prefix_length"`
	SrcPrefixMask   types.String `tfsdk:"source_prefix_mask"`
	Syn             types.Bool   `tfsdk:"syn"`
	TimeRange       types.String `tfsdk:"time_range"`
	Ttl             types.Int64  `tfsdk:"ttl"`
	Urg             types.Bool   `tfsdk:"urg"`
	Vlan            types.Int64  `tfsdk:"vlan"`
	Vni             types.String `tfsdk:"vni"`
}

func (data IPv4AccessListEntry) getDn() string {
	return fmt.Sprintf("sys/acl/ipv4/name-[%s]//seq-[%v]", data.Name.Value, data.SeqNum.Value)
}

func (data IPv4AccessListEntry) getClassName() string {
	return "ipv4aclACE"
}

func (data IPv4AccessListEntry) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("seqNum", strconv.FormatInt(data.SeqNum.Value, 10)).
		Set("ack", strconv.FormatBool(data.Ack.Value)).
		Set("action", data.Action.Value).
		Set("dscp", strconv.FormatInt(data.Dscp.Value, 10)).
		Set("dstAddrGroup", data.DstAddrGroup.Value).
		Set("dstPort1", strconv.FormatInt(data.DstPort1.Value, 10)).
		Set("dstPort2", strconv.FormatInt(data.DstPort2.Value, 10)).
		Set("dstPortGroup", data.DstPortGroup.Value).
		Set("dstPortMask", strconv.FormatInt(data.DstPortMask.Value, 10)).
		Set("dstPortOp", data.DstPortOp.Value).
		Set("dstPrefix", data.DstPrefix.Value).
		Set("dstPrefixLength", data.DstPrefixLength.Value).
		Set("dstPrefixMask", data.DstPrefixMask.Value).
		Set("est", strconv.FormatBool(data.Est.Value)).
		Set("fin", strconv.FormatBool(data.Fin.Value)).
		Set("fragment", strconv.FormatBool(data.Fragment.Value)).
		Set("httpOption", data.HttpOption.Value).
		Set("icmpCode", strconv.FormatInt(data.IcmpCode.Value, 10)).
		Set("icmpType", strconv.FormatInt(data.IcmpType.Value, 10)).
		Set("logging", strconv.FormatBool(data.Logging.Value)).
		Set("pktLen1", data.PktLen1.Value).
		Set("pktLen2", data.PktLen2.Value).
		Set("pktLenOp", data.PktLenOp.Value).
		Set("precedence", strconv.FormatInt(data.Precedence.Value, 10)).
		Set("protocol", data.Protocol.Value).
		Set("protocolMask", data.ProtocolMask.Value).
		Set("psh", strconv.FormatBool(data.Psh.Value)).
		Set("redirect", data.Redirect.Value).
		Set("remark", data.Remark.Value).
		Set("rev", strconv.FormatBool(data.Rev.Value)).
		Set("rst", strconv.FormatBool(data.Rst.Value)).
		Set("srcAddrGroup", data.SrcAddrGroup.Value).
		Set("srcPort1", strconv.FormatInt(data.SrcPort1.Value, 10)).
		Set("srcPort2", strconv.FormatInt(data.SrcPort2.Value, 10)).
		Set("srcPortGroup", data.SrcPortGroup.Value).
		Set("srcPortMask", strconv.FormatInt(data.SrcPortMask.Value, 10)).
		Set("srcPortOp", data.SrcPortOp.Value).
		Set("srcPrefix", data.SrcPrefix.Value).
		Set("srcPrefixLength", data.SrcPrefixLength.Value).
		Set("srcPrefixMask", data.SrcPrefixMask.Value).
		Set("syn", strconv.FormatBool(data.Syn.Value)).
		Set("timeRange", data.TimeRange.Value).
		Set("ttl", strconv.FormatInt(data.Ttl.Value, 10)).
		Set("urg", strconv.FormatBool(data.Urg.Value)).
		Set("vlan", strconv.FormatInt(data.Vlan.Value, 10)).
		Set("vni", data.Vni.Value)
	if data.DstAddrGroup.Value == "" {
		attrs = attrs.Delete("dstAddrGroup")
	}
	if data.DstPortGroup.Value == "" {
		attrs = attrs.Delete("dstPortGroup")
	}
	if data.DstPrefixMask.Value == "" {
		attrs = attrs.Delete("dstPrefixMask")
	}
	if data.ProtocolMask.Value == "" {
		attrs = attrs.Delete("protocolMask")
	}
	if data.Remark.Value == "" {
		attrs = attrs.Delete("remark")
	}
	if data.SrcAddrGroup.Value == "" {
		attrs = attrs.Delete("srcAddrGroup")
	}
	if data.SrcPortGroup.Value == "" {
		attrs = attrs.Delete("srcPortGroup")
	}
	if data.SrcPrefixMask.Value == "" {
		attrs = attrs.Delete("srcPrefixMask")
	}
	if data.TimeRange.Value == "" {
		attrs = attrs.Delete("timeRange")
	}
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *IPv4AccessListEntry) fromBody(res gjson.Result) {
	data.SeqNum.Value = res.Get("*.attributes.seqNum").Int()
	data.Ack.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.ack").String())
	data.Action.Value = res.Get("*.attributes.action").String()
	data.Dscp.Value = res.Get("*.attributes.dscp").Int()
	data.DstAddrGroup.Value = res.Get("*.attributes.dstAddrGroup").String()
	data.DstPort1.Value = res.Get("*.attributes.dstPort1").Int()
	data.DstPort2.Value = res.Get("*.attributes.dstPort2").Int()
	data.DstPortGroup.Value = res.Get("*.attributes.dstPortGroup").String()
	data.DstPortMask.Value = res.Get("*.attributes.dstPortMask").Int()
	data.DstPortOp.Value = res.Get("*.attributes.dstPortOp").String()
	data.DstPrefix.Value = res.Get("*.attributes.dstPrefix").String()
	data.DstPrefixLength.Value = res.Get("*.attributes.dstPrefixLength").String()
	data.DstPrefixMask.Value = res.Get("*.attributes.dstPrefixMask").String()
	data.Est.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.est").String())
	data.Fin.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.fin").String())
	data.Fragment.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.fragment").String())
	data.HttpOption.Value = res.Get("*.attributes.httpOption").String()
	data.IcmpCode.Value = res.Get("*.attributes.icmpCode").Int()
	data.IcmpType.Value = res.Get("*.attributes.icmpType").Int()
	data.Logging.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.logging").String())
	data.PktLen1.Value = res.Get("*.attributes.pktLen1").String()
	data.PktLen2.Value = res.Get("*.attributes.pktLen2").String()
	data.PktLenOp.Value = res.Get("*.attributes.pktLenOp").String()
	data.Precedence.Value = res.Get("*.attributes.precedence").Int()
	data.Protocol.Value = res.Get("*.attributes.protocol").String()
	data.ProtocolMask.Value = res.Get("*.attributes.protocolMask").String()
	data.Psh.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.psh").String())
	data.Redirect.Value = res.Get("*.attributes.redirect").String()
	data.Remark.Value = res.Get("*.attributes.remark").String()
	data.Rev.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.rev").String())
	data.Rst.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.rst").String())
	data.SrcAddrGroup.Value = res.Get("*.attributes.srcAddrGroup").String()
	data.SrcPort1.Value = res.Get("*.attributes.srcPort1").Int()
	data.SrcPort2.Value = res.Get("*.attributes.srcPort2").Int()
	data.SrcPortGroup.Value = res.Get("*.attributes.srcPortGroup").String()
	data.SrcPortMask.Value = res.Get("*.attributes.srcPortMask").Int()
	data.SrcPortOp.Value = res.Get("*.attributes.srcPortOp").String()
	data.SrcPrefix.Value = res.Get("*.attributes.srcPrefix").String()
	data.SrcPrefixLength.Value = res.Get("*.attributes.srcPrefixLength").String()
	data.SrcPrefixMask.Value = res.Get("*.attributes.srcPrefixMask").String()
	data.Syn.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.syn").String())
	data.TimeRange.Value = res.Get("*.attributes.timeRange").String()
	data.Ttl.Value = res.Get("*.attributes.ttl").Int()
	data.Urg.Value = helpers.ParseNxosBoolean(res.Get("*.attributes.urg").String())
	data.Vlan.Value = res.Get("*.attributes.vlan").Int()
	data.Vni.Value = res.Get("*.attributes.vni").String()
}

func (data *IPv4AccessListEntry) fromPlan(plan IPv4AccessListEntry) {
	data.Device = plan.Device
	data.Dn.Value = plan.Dn.Value
	data.Name.Value = plan.Name.Value
}
