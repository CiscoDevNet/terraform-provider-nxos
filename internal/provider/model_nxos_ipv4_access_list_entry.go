// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nxos"
	"github.com/netascode/terraform-provider-nxos/internal/provider/helpers"
	"github.com/tidwall/gjson"
)

type IPv4AccessListEntry struct {
	Device          types.String `tfsdk:"device"`
	Dn              types.String `tfsdk:"id"`
	Name            types.String `tfsdk:"name"`
	SeqNum          types.Int64  `tfsdk:"sequence_number"`
	Ack             types.Bool   `tfsdk:"ack"`
	Action          types.String `tfsdk:"action"`
	Dscp            types.Int64  `tfsdk:"dscp"`
	DstAddrGroup    types.String `tfsdk:"destination_address_group"`
	DstPort1        types.String `tfsdk:"destination_port_1"`
	DstPort2        types.String `tfsdk:"destination_port_2"`
	DstPortGroup    types.String `tfsdk:"destination_port_group"`
	DstPortMask     types.String `tfsdk:"destination_port_mask"`
	DstPortOp       types.String `tfsdk:"destination_port_operator"`
	DstPrefix       types.String `tfsdk:"destination_prefix"`
	DstPrefixLength types.String `tfsdk:"destination_prefix_length"`
	DstPrefixMask   types.String `tfsdk:"destination_prefix_mask"`
	Est             types.Bool   `tfsdk:"est"`
	Fin             types.Bool   `tfsdk:"fin"`
	Fragment        types.Bool   `tfsdk:"fragment"`
	HttpOption      types.String `tfsdk:"http_option_type"`
	IcmpCode        types.Int64  `tfsdk:"icmp_code"`
	IcmpType        types.Int64  `tfsdk:"icmp_type"`
	Logging         types.Bool   `tfsdk:"logging"`
	PktLen1         types.String `tfsdk:"packet_length_1"`
	PktLen2         types.String `tfsdk:"packet_length_2"`
	PktLenOp        types.String `tfsdk:"packet_length_operator"`
	Precedence      types.String `tfsdk:"precedence"`
	Protocol        types.String `tfsdk:"protocol"`
	ProtocolMask    types.String `tfsdk:"protocol_mask"`
	Psh             types.Bool   `tfsdk:"psh"`
	Redirect        types.String `tfsdk:"redirect"`
	Remark          types.String `tfsdk:"remark"`
	Rev             types.Bool   `tfsdk:"rev"`
	Rst             types.Bool   `tfsdk:"rst"`
	SrcAddrGroup    types.String `tfsdk:"source_address_group"`
	SrcPort1        types.String `tfsdk:"source_port_1"`
	SrcPort2        types.String `tfsdk:"source_port_2"`
	SrcPortGroup    types.String `tfsdk:"source_port_group"`
	SrcPortMask     types.String `tfsdk:"source_port_mask"`
	SrcPortOp       types.String `tfsdk:"source_port_operator"`
	SrcPrefix       types.String `tfsdk:"source_prefix"`
	SrcPrefixLength types.String `tfsdk:"source_prefix_length"`
	SrcPrefixMask   types.String `tfsdk:"source_prefix_mask"`
	Syn             types.Bool   `tfsdk:"syn"`
	TimeRange       types.String `tfsdk:"time_range"`
	Ttl             types.Int64  `tfsdk:"ttl"`
	Urg             types.Bool   `tfsdk:"urg"`
	Vlan            types.Int64  `tfsdk:"vlan"`
	Vni             types.String `tfsdk:"vni"`
}

func (data IPv4AccessListEntry) getDn() string {
	return fmt.Sprintf("sys/acl/ipv4/name-[%s]//seq-[%v]", data.Name.ValueString(), data.SeqNum.ValueInt64())
}

func (data IPv4AccessListEntry) getClassName() string {
	return "ipv4aclACE"
}

func (data IPv4AccessListEntry) toBody() nxos.Body {
	attrs := nxos.Body{}.
		Set("seqNum", strconv.FormatInt(data.SeqNum.ValueInt64(), 10)).
		Set("ack", strconv.FormatBool(data.Ack.ValueBool())).
		Set("action", data.Action.ValueString()).
		Set("dscp", strconv.FormatInt(data.Dscp.ValueInt64(), 10)).
		Set("dstAddrGroup", data.DstAddrGroup.ValueString()).
		Set("dstPort1", data.DstPort1.ValueString()).
		Set("dstPort2", data.DstPort2.ValueString()).
		Set("dstPortGroup", data.DstPortGroup.ValueString()).
		Set("dstPortMask", data.DstPortMask.ValueString()).
		Set("dstPortOp", data.DstPortOp.ValueString()).
		Set("dstPrefix", data.DstPrefix.ValueString()).
		Set("dstPrefixLength", data.DstPrefixLength.ValueString()).
		Set("dstPrefixMask", data.DstPrefixMask.ValueString()).
		Set("est", strconv.FormatBool(data.Est.ValueBool())).
		Set("fin", strconv.FormatBool(data.Fin.ValueBool())).
		Set("fragment", strconv.FormatBool(data.Fragment.ValueBool())).
		Set("httpOption", data.HttpOption.ValueString()).
		Set("icmpCode", strconv.FormatInt(data.IcmpCode.ValueInt64(), 10)).
		Set("icmpType", strconv.FormatInt(data.IcmpType.ValueInt64(), 10)).
		Set("logging", strconv.FormatBool(data.Logging.ValueBool())).
		Set("pktLen1", data.PktLen1.ValueString()).
		Set("pktLen2", data.PktLen2.ValueString()).
		Set("pktLenOp", data.PktLenOp.ValueString()).
		Set("precedence", data.Precedence.ValueString()).
		Set("protocol", data.Protocol.ValueString()).
		Set("protocolMask", data.ProtocolMask.ValueString()).
		Set("psh", strconv.FormatBool(data.Psh.ValueBool())).
		Set("redirect", data.Redirect.ValueString()).
		Set("remark", data.Remark.ValueString()).
		Set("rev", strconv.FormatBool(data.Rev.ValueBool())).
		Set("rst", strconv.FormatBool(data.Rst.ValueBool())).
		Set("srcAddrGroup", data.SrcAddrGroup.ValueString()).
		Set("srcPort1", data.SrcPort1.ValueString()).
		Set("srcPort2", data.SrcPort2.ValueString()).
		Set("srcPortGroup", data.SrcPortGroup.ValueString()).
		Set("srcPortMask", data.SrcPortMask.ValueString()).
		Set("srcPortOp", data.SrcPortOp.ValueString()).
		Set("srcPrefix", data.SrcPrefix.ValueString()).
		Set("srcPrefixLength", data.SrcPrefixLength.ValueString()).
		Set("srcPrefixMask", data.SrcPrefixMask.ValueString()).
		Set("syn", strconv.FormatBool(data.Syn.ValueBool())).
		Set("timeRange", data.TimeRange.ValueString()).
		Set("ttl", strconv.FormatInt(data.Ttl.ValueInt64(), 10)).
		Set("urg", strconv.FormatBool(data.Urg.ValueBool())).
		Set("vlan", strconv.FormatInt(data.Vlan.ValueInt64(), 10)).
		Set("vni", data.Vni.ValueString())
	if data.Dscp.IsUnknown() || data.Dscp.IsNull() {
		attrs = attrs.Delete("dscp")
	}
	if data.DstAddrGroup.IsUnknown() || data.DstAddrGroup.IsNull() {
		attrs = attrs.Delete("dstAddrGroup")
	}
	if data.DstPort1.IsUnknown() || data.DstPort1.IsNull() {
		attrs = attrs.Delete("dstPort1")
	}
	if data.DstPort2.IsUnknown() || data.DstPort2.IsNull() {
		attrs = attrs.Delete("dstPort2")
	}
	if data.DstPortGroup.IsUnknown() || data.DstPortGroup.IsNull() {
		attrs = attrs.Delete("dstPortGroup")
	}
	if data.DstPortMask.IsUnknown() || data.DstPortMask.IsNull() {
		attrs = attrs.Delete("dstPortMask")
	}
	if data.DstPrefix.IsUnknown() || data.DstPrefix.IsNull() {
		attrs = attrs.Delete("dstPrefix")
	}
	if data.DstPrefixLength.IsUnknown() || data.DstPrefixLength.IsNull() {
		attrs = attrs.Delete("dstPrefixLength")
	}
	if data.DstPrefixMask.IsUnknown() || data.DstPrefixMask.IsNull() {
		attrs = attrs.Delete("dstPrefixMask")
	}
	if data.Protocol.IsUnknown() || data.Protocol.IsNull() {
		attrs = attrs.Delete("protocol")
	}
	if data.ProtocolMask.IsUnknown() || data.ProtocolMask.IsNull() {
		attrs = attrs.Delete("protocolMask")
	}
	if data.Remark.IsUnknown() || data.Remark.IsNull() {
		attrs = attrs.Delete("remark")
	}
	if data.SrcAddrGroup.IsUnknown() || data.SrcAddrGroup.IsNull() {
		attrs = attrs.Delete("srcAddrGroup")
	}
	if data.SrcPort1.IsUnknown() || data.SrcPort1.IsNull() {
		attrs = attrs.Delete("srcPort1")
	}
	if data.SrcPort2.IsUnknown() || data.SrcPort2.IsNull() {
		attrs = attrs.Delete("srcPort2")
	}
	if data.SrcPortGroup.IsUnknown() || data.SrcPortGroup.IsNull() {
		attrs = attrs.Delete("srcPortGroup")
	}
	if data.SrcPortMask.IsUnknown() || data.SrcPortMask.IsNull() {
		attrs = attrs.Delete("srcPortMask")
	}
	if data.SrcPrefix.IsUnknown() || data.SrcPrefix.IsNull() {
		attrs = attrs.Delete("srcPrefix")
	}
	if data.SrcPrefixLength.IsUnknown() || data.SrcPrefixLength.IsNull() {
		attrs = attrs.Delete("srcPrefixLength")
	}
	if data.SrcPrefixMask.IsUnknown() || data.SrcPrefixMask.IsNull() {
		attrs = attrs.Delete("srcPrefixMask")
	}
	if data.TimeRange.IsUnknown() || data.TimeRange.IsNull() {
		attrs = attrs.Delete("timeRange")
	}
	return nxos.Body{}.SetRaw(data.getClassName()+".attributes", attrs.Str)
}

func (data *IPv4AccessListEntry) fromBody(res gjson.Result) {
	data.SeqNum = types.Int64Value(res.Get("*.attributes.seqNum").Int())
	data.Ack = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.ack").String()))
	data.Action = types.StringValue(res.Get("*.attributes.action").String())
	data.Dscp = types.Int64Value(res.Get("*.attributes.dscp").Int())
	data.DstAddrGroup = types.StringValue(res.Get("*.attributes.dstAddrGroup").String())
	data.DstPort1 = types.StringValue(res.Get("*.attributes.dstPort1").String())
	data.DstPort2 = types.StringValue(res.Get("*.attributes.dstPort2").String())
	data.DstPortGroup = types.StringValue(res.Get("*.attributes.dstPortGroup").String())
	data.DstPortMask = types.StringValue(res.Get("*.attributes.dstPortMask").String())
	data.DstPortOp = types.StringValue(res.Get("*.attributes.dstPortOp").String())
	data.DstPrefix = types.StringValue(res.Get("*.attributes.dstPrefix").String())
	data.DstPrefixLength = types.StringValue(res.Get("*.attributes.dstPrefixLength").String())
	data.DstPrefixMask = types.StringValue(res.Get("*.attributes.dstPrefixMask").String())
	data.Est = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.est").String()))
	data.Fin = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.fin").String()))
	data.Fragment = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.fragment").String()))
	data.HttpOption = types.StringValue(res.Get("*.attributes.httpOption").String())
	data.IcmpCode = types.Int64Value(res.Get("*.attributes.icmpCode").Int())
	data.IcmpType = types.Int64Value(res.Get("*.attributes.icmpType").Int())
	data.Logging = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.logging").String()))
	data.PktLen1 = types.StringValue(res.Get("*.attributes.pktLen1").String())
	data.PktLen2 = types.StringValue(res.Get("*.attributes.pktLen2").String())
	data.PktLenOp = types.StringValue(res.Get("*.attributes.pktLenOp").String())
	data.Precedence = types.StringValue(res.Get("*.attributes.precedence").String())
	data.Protocol = types.StringValue(res.Get("*.attributes.protocol").String())
	data.ProtocolMask = types.StringValue(res.Get("*.attributes.protocolMask").String())
	data.Psh = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.psh").String()))
	data.Redirect = types.StringValue(res.Get("*.attributes.redirect").String())
	data.Remark = types.StringValue(res.Get("*.attributes.remark").String())
	data.Rev = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.rev").String()))
	data.Rst = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.rst").String()))
	data.SrcAddrGroup = types.StringValue(res.Get("*.attributes.srcAddrGroup").String())
	data.SrcPort1 = types.StringValue(res.Get("*.attributes.srcPort1").String())
	data.SrcPort2 = types.StringValue(res.Get("*.attributes.srcPort2").String())
	data.SrcPortGroup = types.StringValue(res.Get("*.attributes.srcPortGroup").String())
	data.SrcPortMask = types.StringValue(res.Get("*.attributes.srcPortMask").String())
	data.SrcPortOp = types.StringValue(res.Get("*.attributes.srcPortOp").String())
	data.SrcPrefix = types.StringValue(res.Get("*.attributes.srcPrefix").String())
	data.SrcPrefixLength = types.StringValue(res.Get("*.attributes.srcPrefixLength").String())
	data.SrcPrefixMask = types.StringValue(res.Get("*.attributes.srcPrefixMask").String())
	data.Syn = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.syn").String()))
	data.TimeRange = types.StringValue(res.Get("*.attributes.timeRange").String())
	data.Ttl = types.Int64Value(res.Get("*.attributes.ttl").Int())
	data.Urg = types.BoolValue(helpers.ParseNxosBoolean(res.Get("*.attributes.urg").String()))
	data.Vlan = types.Int64Value(res.Get("*.attributes.vlan").Int())
	data.Vni = types.StringValue(res.Get("*.attributes.vni").String())
}

func (data *IPv4AccessListEntry) fromPlan(plan IPv4AccessListEntry) {
	data.Device = plan.Device
	data.Dn = plan.Dn
	data.Name = plan.Name
}
